"""
üìä –ú–û–ù–Ü–¢–û–† –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–Ü
–í—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É—î —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É—î –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –±–æ—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
"""

import time
import asyncio
import functools
import logging
import psutil
import os
from typing import Callable, Any
from datetime import datetime

logger = logging.getLogger(__name__)


class PerformanceMonitor:
    """–ú–æ–Ω—ñ—Ç–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
    
    def __init__(self, optimizer=None):
        self.optimizer = optimizer
        self.process = psutil.Process(os.getpid())
        self.start_time = time.time()
        self.monitoring_enabled = True
        
    def get_memory_usage(self) -> float:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ (MB)"""
        try:
            return self.process.memory_info().rss / 1024 / 1024
        except Exception:
            return 0.0
    
    def get_cpu_usage(self) -> float:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è CPU (%)"""
        try:
            return self.process.cpu_percent(interval=0.1)
        except Exception:
            return 0.0
    
    def get_uptime(self) -> float:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —á–∞—Å —Ä–æ–±–æ—Ç–∏ (—Å–µ–∫—É–Ω–¥–∏)"""
        return time.time() - self.start_time
    
    def get_system_stats(self) -> dict:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            return {
                'memory_mb': self.get_memory_usage(),
                'cpu_percent': self.get_cpu_usage(),
                'uptime_seconds': self.get_uptime(),
                'threads': self.process.num_threads(),
                'open_files': len(self.process.open_files()),
            }
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    def log_stats(self):
        """–í–∏–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ª–æ–≥"""
        stats = self.get_system_stats()
        if stats:
            logger.info(
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: "
                f"RAM: {stats['memory_mb']:.1f}MB | "
                f"CPU: {stats['cpu_percent']:.1f}% | "
                f"Uptime: {stats['uptime_seconds']/3600:.1f}h | "
                f"Threads: {stats['threads']}"
            )


def performance_tracked(func: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ—ó"""
    
    @functools.wraps(func)
    async def async_wrapper(*args, **kwargs):
        start_time = time.time()
        success = True
        error = None
        result = None
        
        try:
            result = await func(*args, **kwargs)
            return result
        except Exception as e:
            success = False
            error = str(e)
            raise
        finally:
            execution_time = time.time() - start_time
            
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è —è–∫—â–æ —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–æ–Ω—É–≤–∞–ª–∞—Å—è –¥–æ–≤–≥–æ
            if execution_time > 1.0:
                logger.warning(
                    f"‚ö†Ô∏è –ü–æ–≤—ñ–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è: {func.__name__} "
                    f"–≤–∏–∫–æ–Ω—É–≤–∞–ª–∞—Å—è {execution_time:.3f}s"
                )
            
            # –ó–∞–ø–∏—Å—É—î–º–æ –º–µ—Ç—Ä–∏–∫—É –≤ –æ–ø—Ç–∏–º—ñ–∑–∞—Ç–æ—Ä —è–∫—â–æ –≤—ñ–Ω –¥–æ—Å—Ç—É–ø–Ω–∏–π
            try:
                # –®—É–∫–∞—î–º–æ –æ–ø—Ç–∏–º—ñ–∑–∞—Ç–æ—Ä –≤ args (self)
                if args and hasattr(args[0], 'optimizer'):
                    optimizer = args[0].optimizer
                    if optimizer and hasattr(optimizer, 'profiler'):
                        from self_optimizer import PerformanceMetrics
                        
                        metric = PerformanceMetrics(
                            timestamp=start_time,
                            function_name=func.__name__,
                            execution_time=execution_time,
                            success=success,
                            error=error
                        )
                        optimizer.profiler.record_metric(metric)
            except Exception as e:
                logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø–∏—Å–∞—Ç–∏ –º–µ—Ç—Ä–∏–∫—É: {e}")
    
    @functools.wraps(func)
    def sync_wrapper(*args, **kwargs):
        start_time = time.time()
        success = True
        error = None
        result = None
        
        try:
            result = func(*args, **kwargs)
            return result
        except Exception as e:
            success = False
            error = str(e)
            raise
        finally:
            execution_time = time.time() - start_time
            
            if execution_time > 1.0:
                logger.warning(
                    f"‚ö†Ô∏è –ü–æ–≤—ñ–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è: {func.__name__} "
                    f"–≤–∏–∫–æ–Ω—É–≤–∞–ª–∞—Å—è {execution_time:.3f}s"
                )
    
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π wrapper
    if asyncio.iscoroutinefunction(func):
        return async_wrapper
    else:
        return sync_wrapper


class CacheManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–µ—à—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó"""
    
    def __init__(self, default_ttl: int = 300):
        self.cache = {}
        self.default_ttl = default_ttl
        self.hits = 0
        self.misses = 0
        
    def get(self, key: str) -> Any:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –∫–µ—à—É"""
        if key in self.cache:
            entry = self.cache[key]
            if time.time() < entry['expires']:
                self.hits += 1
                return entry['value']
            else:
                del self.cache[key]
        
        self.misses += 1
        return None
    
    def set(self, key: str, value: Any, ttl: int = None):
        """–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –∫–µ—à"""
        if ttl is None:
            ttl = self.default_ttl
        
        self.cache[key] = {
            'value': value,
            'expires': time.time() + ttl,
            'created': time.time()
        }
    
    def clear_expired(self):
        """–û—á–∏—Å—Ç–∏—Ç–∏ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ –∑–∞–ø–∏—Å–∏"""
        current_time = time.time()
        expired_keys = [
            key for key, entry in self.cache.items()
            if current_time >= entry['expires']
        ]
        
        for key in expired_keys:
            del self.cache[key]
        
        if expired_keys:
            logger.debug(f"üßπ –û—á–∏—â–µ–Ω–æ {len(expired_keys)} –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –∫–µ—à—É")
    
    def get_stats(self) -> dict:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à—É"""
        total = self.hits + self.misses
        hit_rate = (self.hits / total * 100) if total > 0 else 0
        
        return {
            'size': len(self.cache),
            'hits': self.hits,
            'misses': self.misses,
            'hit_rate': hit_rate
        }
    
    def log_stats(self):
        """–í–∏–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à—É"""
        stats = self.get_stats()
        logger.info(
            f"üíæ –ö–µ—à: —Ä–æ–∑–º—ñ—Ä={stats['size']} | "
            f"hits={stats['hits']} | "
            f"misses={stats['misses']} | "
            f"hit_rate={stats['hit_rate']:.1f}%"
        )


def cached(ttl: int = 300):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ñ—É–Ω–∫—Ü—ñ—ó"""
    
    def decorator(func: Callable) -> Callable:
        cache = {}
        
        @functools.wraps(func)
        async def async_wrapper(*args, **kwargs):
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—é—á –∫–µ—à—É
            cache_key = f"{func.__name__}:{str(args)}:{str(kwargs)}"
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
            if cache_key in cache:
                entry = cache[cache_key]
                if time.time() < entry['expires']:
                    logger.debug(f"üíæ –ö–µ—à HIT: {func.__name__}")
                    return entry['value']
                else:
                    del cache[cache_key]
            
            # –í–∏–∫–æ–Ω—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é
            logger.debug(f"üíæ –ö–µ—à MISS: {func.__name__}")
            result = await func(*args, **kwargs)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
            cache[cache_key] = {
                'value': result,
                'expires': time.time() + ttl,
                'created': time.time()
            }
            
            return result
        
        @functools.wraps(func)
        def sync_wrapper(*args, **kwargs):
            cache_key = f"{func.__name__}:{str(args)}:{str(kwargs)}"
            
            if cache_key in cache:
                entry = cache[cache_key]
                if time.time() < entry['expires']:
                    logger.debug(f"üíæ –ö–µ—à HIT: {func.__name__}")
                    return entry['value']
                else:
                    del cache[cache_key]
            
            logger.debug(f"üíæ –ö–µ—à MISS: {func.__name__}")
            result = func(*args, **kwargs)
            
            cache[cache_key] = {
                'value': result,
                'expires': time.time() + ttl,
                'created': time.time()
            }
            
            return result
        
        if asyncio.iscoroutinefunction(func):
            return async_wrapper
        else:
            return sync_wrapper
    
    return decorator


class AdaptiveRateLimiter:
    """–ê–¥–∞–ø—Ç–∏–≤–Ω–∏–π –æ–±–º–µ–∂—É–≤–∞—á —à–≤–∏–¥–∫–æ—Å—Ç—ñ"""
    
    def __init__(self, initial_rate: float = 1.0):
        self.rate = initial_rate  # –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —Å–µ–∫—É–Ω–¥—É
        self.last_call = 0
        self.success_count = 0
        self.error_count = 0
        self.adjustment_threshold = 10
        
    async def wait(self):
        """–ü–æ—á–µ–∫–∞—Ç–∏ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º"""
        current_time = time.time()
        time_since_last = current_time - self.last_call
        required_delay = 1.0 / self.rate
        
        if time_since_last < required_delay:
            await asyncio.sleep(required_delay - time_since_last)
        
        self.last_call = time.time()
    
    def record_success(self):
        """–ó–∞–ø–∏—Å–∞—Ç–∏ —É—Å–ø—ñ—à–Ω–∏–π –∑–∞–ø–∏—Ç"""
        self.success_count += 1
        self._adjust_rate()
    
    def record_error(self):
        """–ó–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É"""
        self.error_count += 1
        self._adjust_rate()
    
    def _adjust_rate(self):
        """–ê–¥–∞–ø—Ç—É–≤–∞—Ç–∏ —à–≤–∏–¥–∫—ñ—Å—Ç—å"""
        total = self.success_count + self.error_count
        
        if total >= self.adjustment_threshold:
            error_rate = self.error_count / total
            
            if error_rate > 0.1:  # –ë—ñ–ª—å—à–µ 10% –ø–æ–º–∏–ª–æ–∫
                # –ó–º–µ–Ω—à—É—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å
                self.rate = max(0.1, self.rate * 0.8)
                logger.info(f"‚¨áÔ∏è –ó–º–µ–Ω—à–µ–Ω–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ {self.rate:.2f} req/s")
            elif error_rate < 0.01:  # –ú–µ–Ω—à–µ 1% –ø–æ–º–∏–ª–æ–∫
                # –ó–±—ñ–ª—å—à—É—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å
                self.rate = min(10.0, self.rate * 1.2)
                logger.info(f"‚¨ÜÔ∏è –ó–±—ñ–ª—å—à–µ–Ω–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ {self.rate:.2f} req/s")
            
            # –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏
            self.success_count = 0
            self.error_count = 0


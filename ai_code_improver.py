"""
ü§ñ AI –ü–û–ö–†–ê–©–£–í–ê–ß –ö–û–î–£
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î AI –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∫–æ–¥—É
"""

import asyncio
import logging
import json
import os
from datetime import datetime
from typing import Optional, List, Dict, Any
import ast
import inspect

logger = logging.getLogger(__name__)


class CodeAnalyzer:
    """–ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –∫–æ–¥—É"""
    
    @staticmethod
    def extract_function_code(func) -> str:
        """–í–∏—Ç—è–≥—Ç–∏ –∫–æ–¥ —Ñ—É–Ω–∫—Ü—ñ—ó"""
        try:
            return inspect.getsource(func)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥—Ç–∏ –∫–æ–¥ —Ñ—É–Ω–∫—Ü—ñ—ó: {e}")
            return ""
    
    @staticmethod
    def analyze_complexity(code: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª—ñ–∑ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –∫–æ–¥—É"""
        try:
            tree = ast.parse(code)
            
            # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Ä—ñ–∑–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
            stats = {
                'lines': len(code.split('\n')),
                'functions': 0,
                'classes': 0,
                'loops': 0,
                'conditions': 0,
                'try_except': 0,
                'complexity_score': 0
            }
            
            for node in ast.walk(tree):
                if isinstance(node, ast.FunctionDef):
                    stats['functions'] += 1
                elif isinstance(node, ast.ClassDef):
                    stats['classes'] += 1
                elif isinstance(node, (ast.For, ast.While)):
                    stats['loops'] += 1
                elif isinstance(node, ast.If):
                    stats['conditions'] += 1
                elif isinstance(node, ast.Try):
                    stats['try_except'] += 1
            
            # –ü—Ä–æ—Å—Ç–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
            stats['complexity_score'] = (
                stats['loops'] * 2 +
                stats['conditions'] * 1 +
                stats['try_except'] * 1
            )
            
            return stats
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ: {e}")
            return {}
    
    @staticmethod
    def find_potential_issues(code: str) -> List[str]:
        """–ó–Ω–∞–π—Ç–∏ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –≤ –∫–æ–¥—ñ"""
        issues = []
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥–æ–≤–≥—ñ —Ä—è–¥–∫–∏
        lines = code.split('\n')
        for i, line in enumerate(lines, 1):
            if len(line) > 120:
                issues.append(f"–†—è–¥–æ–∫ {i}: –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π ({len(line)} —Å–∏–º–≤–æ–ª—ñ–≤)")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∫–ª–∞–¥–µ–Ω—ñ —Ü–∏–∫–ª–∏
        if 'for' in code and code.count('for') > 2:
            issues.append("–ú–æ–∂–ª–∏–≤–æ –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –≤–∫–ª–∞–¥–µ–Ω–∏—Ö —Ü–∏–∫–ª—ñ–≤")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å docstring
        if 'def ' in code and '"""' not in code and "'''" not in code:
            issues.append("–í—ñ–¥—Å—É—Ç–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è (docstring)")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ bare except
        if 'except:' in code:
            issues.append("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è bare except (–∫—Ä–∞—â–µ –≤–∫–∞–∑–∞—Ç–∏ —Ç–∏–ø –ø–æ–º–∏–ª–∫–∏)")
        
        return issues


class AICodeImprover:
    """AI –ø–æ–∫—Ä–∞—â—É–≤–∞—á –∫–æ–¥—É"""
    
    def __init__(self, anthropic_client=None, openai_client=None):
        self.anthropic_client = anthropic_client
        self.openai_client = openai_client
        self.improvements_file = "code_improvements.json"
        self.improvements_history = []
        self.load_history()
        
    def load_history(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–∫—Ä–∞—â–µ–Ω—å"""
        if os.path.exists(self.improvements_file):
            try:
                with open(self.improvements_file, 'r', encoding='utf-8') as f:
                    self.improvements_history = json.load(f)
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó: {e}")
    
    def save_history(self):
        """–ó–±–µ—Ä–µ–≥—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–∫—Ä–∞—â–µ–Ω—å"""
        try:
            with open(self.improvements_file, 'w', encoding='utf-8') as f:
                json.dump(self.improvements_history, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó: {e}")
    
    async def analyze_and_improve(self, code: str, context: str = "") -> Optional[Dict[str, Any]]:
        """–ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –∫–æ–¥ —á–µ—Ä–µ–∑ AI"""
        if not self.anthropic_client:
            logger.warning("AI –∫–ª—ñ—î–Ω—Ç –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π")
            return None
        
        try:
            # –ê–Ω–∞–ª—ñ–∑ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
            complexity = CodeAnalyzer.analyze_complexity(code)
            issues = CodeAnalyzer.find_potential_issues(code)
            
            # –§–æ—Ä–º—É—î–º–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è AI
            prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ç–∞ –ø–æ–∫—Ä–∞—â–∏ —Ü–µ–π Python –∫–æ–¥.

–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}

–ü–æ—Ç–æ—á–Ω–∏–π –∫–æ–¥:
```python
{code}
```

–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–¥—É:
- –†—è–¥–∫—ñ–≤: {complexity.get('lines', 0)}
- –§—É–Ω–∫—Ü—ñ–π: {complexity.get('functions', 0)}
- –¶–∏–∫–ª—ñ–≤: {complexity.get('loops', 0)}
- –£–º–æ–≤: {complexity.get('conditions', 0)}
- –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: {complexity.get('complexity_score', 0)}

–ó–Ω–∞–π–¥–µ–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏:
{chr(10).join(f"- {issue}" for issue in issues) if issues else "–ù–µ–º–∞—î —è–≤–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º"}

–ó–∞–ø—Ä–æ–ø–æ–Ω—É–π –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –¥–ª—è:
1. **–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å** - —è–∫ –∑—Ä–æ–±–∏—Ç–∏ –∫–æ–¥ —à–≤–∏–¥—à–∏–º
2. **–ß–∏—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å** - —è–∫ –∑—Ä–æ–±–∏—Ç–∏ –∫–æ–¥ –∑—Ä–æ–∑—É–º—ñ–ª—ñ—à–∏–º
3. **–ù–∞–¥—ñ–π–Ω—ñ—Å—Ç—å** - —è–∫ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –æ–±—Ä–æ–±–∫—É –ø–æ–º–∏–ª–æ–∫
4. **–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è** - —è–∫ –∑–º–µ–Ω—à–∏—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤

–í—ñ–¥–ø–æ–≤—ñ–¥—å —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON:
{{
  "improvements": [
    {{
      "category": "performance|readability|reliability|optimization",
      "priority": "low|medium|high|critical",
      "description": "—â–æ –ø–æ–∫—Ä–∞—â–∏—Ç–∏",
      "reason": "—á–æ–º—É —Ü–µ –≤–∞–∂–ª–∏–≤–æ",
      "improved_code": "–ø–æ–∫—Ä–∞—â–µ–Ω–∏–π –∫–æ–¥",
      "expected_benefit": "–æ—á—ñ–∫—É–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—å"
    }}
  ],
  "overall_assessment": "–∑–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ –∫–æ–¥—É",
  "recommendation": "–≥–æ–ª–æ–≤–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è"
}}"""
            
            logger.info("ü§ñ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –∫–æ–¥ –Ω–∞ –∞–Ω–∞–ª—ñ–∑ AI...")
            
            response = await self.anthropic_client.messages.create(
                model="claude-3-5-sonnet-20241022",
                max_tokens=4000,
                messages=[{"role": "user", "content": prompt}]
            )
            
            response_text = response.content[0].text
            
            # –í–∏—Ç—è–≥—É—î–º–æ JSON –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            try:
                # –®—É–∫–∞—î–º–æ JSON –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                start = response_text.find('{')
                end = response_text.rfind('}') + 1
                if start != -1 and end > start:
                    json_str = response_text[start:end]
                    result = json.loads(json_str)
                else:
                    result = {'raw_response': response_text}
            except json.JSONDecodeError:
                result = {'raw_response': response_text}
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é
            improvement_record = {
                'timestamp': datetime.now().isoformat(),
                'context': context,
                'original_code_lines': complexity.get('lines', 0),
                'complexity_score': complexity.get('complexity_score', 0),
                'issues_found': len(issues),
                'improvements': result.get('improvements', []),
                'assessment': result.get('overall_assessment', ''),
                'recommendation': result.get('recommendation', '')
            }
            
            self.improvements_history.append(improvement_record)
            self.save_history()
            
            logger.info(f"‚úÖ AI –∞–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ó–Ω–∞–π–¥–µ–Ω–æ {len(result.get('improvements', []))} –ø–æ–∫—Ä–∞—â–µ–Ω—å")
            
            return result
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ AI –∞–Ω–∞–ª—ñ–∑—É –∫–æ–¥—É: {e}")
            return None
    
    async def generate_optimization_patch(self, function_name: str, current_code: str) -> Optional[str]:
        """–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–∞—Ç—á –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó —Ñ—É–Ω–∫—Ü—ñ—ó"""
        if not self.anthropic_client:
            return None
        
        try:
            prompt = f"""–°—Ç–≤–æ—Ä–∏ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç —Ü—ñ—î—ó Python —Ñ—É–Ω–∫—Ü—ñ—ó.

–§—É–Ω–∫—Ü—ñ—è: {function_name}

–ü–æ—Ç–æ—á–Ω–∏–π –∫–æ–¥:
```python
{current_code}
```

–í–∏–º–æ–≥–∏:
1. –ó–±–µ—Ä–µ–≥—Ç–∏ –≤—Å—é —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å
2. –ü–æ–∫—Ä–∞—â–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
3. –î–æ–¥–∞—Ç–∏ –∫–µ—à—É–≤–∞–Ω–Ω—è —è–∫—â–æ –º–æ–∂–ª–∏–≤–æ
4. –ü–æ–∫—Ä–∞—â–∏—Ç–∏ –æ–±—Ä–æ–±–∫—É –ø–æ–º–∏–ª–æ–∫
5. –î–æ–¥–∞—Ç–∏ type hints —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î

–ü–æ–≤–µ—Ä–Ω–∏ –¢–Ü–õ–¨–ö–ò –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü—ñ—ó, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω—å."""

            response = await self.anthropic_client.messages.create(
                model="claude-3-5-sonnet-20241022",
                max_tokens=2000,
                messages=[{"role": "user", "content": prompt}]
            )
            
            improved_code = response.content[0].text
            
            # –í–∏—Ç—è–≥—É—î–º–æ –∫–æ–¥ –∑ markdown —è–∫—â–æ —î
            if '```python' in improved_code:
                start = improved_code.find('```python') + 9
                end = improved_code.find('```', start)
                improved_code = improved_code[start:end].strip()
            
            return improved_code
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–∞—Ç—á—É: {e}")
            return None
    
    def get_improvement_stats(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫—Ä–∞—â–µ–Ω—å"""
        if not self.improvements_history:
            return {}
        
        total_improvements = sum(
            len(record.get('improvements', []))
            for record in self.improvements_history
        )
        
        categories = {}
        priorities = {}
        
        for record in self.improvements_history:
            for improvement in record.get('improvements', []):
                cat = improvement.get('category', 'unknown')
                pri = improvement.get('priority', 'unknown')
                
                categories[cat] = categories.get(cat, 0) + 1
                priorities[pri] = priorities.get(pri, 0) + 1
        
        return {
            'total_analyses': len(self.improvements_history),
            'total_improvements': total_improvements,
            'by_category': categories,
            'by_priority': priorities,
            'last_analysis': self.improvements_history[-1]['timestamp'] if self.improvements_history else None
        }
    
    def log_stats(self):
        """–í–∏–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫—Ä–∞—â–µ–Ω—å"""
        stats = self.get_improvement_stats()
        if stats:
            logger.info(
                f"ü§ñ AI –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è: "
                f"–∞–Ω–∞–ª—ñ–∑—ñ–≤={stats['total_analyses']} | "
                f"–ø–æ–∫—Ä–∞—â–µ–Ω—å={stats['total_improvements']}"
            )


class AutoPatcher:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ø–∞—Ç—á—ñ–≤"""
    
    def __init__(self, backup_dir: str = "code_backups"):
        self.backup_dir = backup_dir
        os.makedirs(backup_dir, exist_ok=True)
        
    def create_backup(self, file_path: str) -> str:
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –±–µ–∫–∞–ø —Ñ–∞–π–ª—É"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_name = f"{os.path.basename(file_path)}.{timestamp}.backup"
            backup_path = os.path.join(self.backup_dir, backup_name)
            
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            with open(backup_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            logger.info(f"üíæ –°—Ç–≤–æ—Ä–µ–Ω–æ –±–µ–∫–∞–ø: {backup_path}")
            return backup_path
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–µ–∫–∞–ø—É: {e}")
            return ""
    
    def apply_patch(self, file_path: str, new_code: str, dry_run: bool = True) -> bool:
        """–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –ø–∞—Ç—á –¥–æ —Ñ–∞–π–ª—É"""
        try:
            if dry_run:
                logger.info(f"üîç DRY RUN: –ü–∞—Ç—á –¥–ª—è {file_path}")
                logger.info(f"–ù–æ–≤–∏–π –∫–æ–¥:\n{new_code}")
                return True
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –±–µ–∫–∞–ø
            backup_path = self.create_backup(file_path)
            if not backup_path:
                logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±–µ–∫–∞–ø, –ø–∞—Ç—á –Ω–µ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ")
                return False
            
            # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ø–∞—Ç—á
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(new_code)
            
            logger.info(f"‚úÖ –ü–∞—Ç—á –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –¥–æ {file_path}")
            return True
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ø–∞—Ç—á—É: {e}")
            return False


import logging
import sys
import json
import os
import paramiko
import uuid
import signal
import traceback
import warnings
import inspect
from datetime import datetime
from pyrogram import Client
from pyrogram.types import Message
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, Message as TelegramMessage
from telegram.ext import Application, CommandHandler, MessageHandler, filters as tg_filters, CallbackQueryHandler, CallbackContext
import asyncio
from apscheduler.schedulers.background import BackgroundScheduler
from typing import Dict, List, Any
from openai import AsyncOpenAI
from anthropic import AsyncAnthropic
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∑ .env —Ñ–∞–π–ª—É
load_dotenv()

# Type alias –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É (–¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —Ä—ñ–∑–Ω–∏–º–∏ –≤–µ—Ä—Å—ñ—è–º–∏ IDE)
ContextType = CallbackContext[Any, Any, Any, Any]

# –ü—Ä–∏–¥—É—à—É—î–º–æ RuntimeWarning –ø—Ä–æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω—ñ –∫–æ—Ä—É—Ç–∏–Ω–∏ Pyrogram
# –¶–µ –≤—ñ–¥–æ–º–∞ –ø—Ä–æ–±–ª–µ–º–∞ Pyrogram - Dispatcher —Å—Ç–≤–æ—Ä—é—î tasks —è–∫—ñ –Ω–µ –æ—á–∏—â–∞—é—Ç—å—Å—è
warnings.filterwarnings("ignore", message="coroutine.*was never awaited", category=RuntimeWarning)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É –ª–æ–≥—ñ–≤ –∑ –¥–∞—Ç–æ—é
def get_log_filename():
    return f"bot_{datetime.now().strftime('%Y-%m-%d')}.log"

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
# –§–∞–π–ª - –≤—Å–µ –¥–µ—Ç–∞–ª—å–Ω–æ (—è–∫ —Ä–∞–Ω—ñ—à–µ –≤ –∫–æ–Ω—Å–æ–ª—ñ), –∫–æ–Ω—Å–æ–ª—å - —Ç—ñ–ª—å–∫–∏ –∫–æ–º–ø–∞–∫—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
current_log_file = get_log_filename()
file_handler = logging.FileHandler(current_log_file, encoding='utf-8')
file_handler.setLevel(logging.DEBUG)
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))

# –ö–æ–Ω—Å–æ–ª—å - —Ç—ñ–ª—å–∫–∏ –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ (–∫–æ–º–ø–∞–∫—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–≤–æ–¥–∏–º–æ —á–µ—Ä–µ–∑ print)
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setLevel(logging.ERROR)  # –¢—ñ–ª—å–∫–∏ ERROR –≤ –∫–æ–Ω—Å–æ–ª—å
console_handler.setFormatter(logging.Formatter('%(levelname)s: %(message)s'))

logging.basicConfig(
    level=logging.DEBUG,
    handlers=[file_handler, console_handler]
)

logger = logging.getLogger(__name__)

# –í–∫–ª—é—á–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –±—ñ–±–ª—ñ–æ—Ç–µ–∫ –≤ —Ñ–∞–π–ª (—è–∫ —Ä–∞–Ω—ñ—à–µ –≤ –∫–æ–Ω—Å–æ–ª—ñ)
logging.getLogger("pyrogram").setLevel(logging.DEBUG)
logging.getLogger("httpx").setLevel(logging.INFO)
logging.getLogger("paramiko").setLevel(logging.INFO)
logging.getLogger("apscheduler").setLevel(logging.INFO)
logging.getLogger("telegram").setLevel(logging.INFO)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Telegram Client API
API_ID = os.getenv("API_ID")  # –û—Ç—Ä–∏–º–∞–π—Ç–µ –Ω–∞ https://my.telegram.org
API_HASH = os.getenv("API_HASH")  # –û—Ç—Ä–∏–º–∞–π—Ç–µ –Ω–∞ https://my.telegram.org
SESSION_NAME = "telegram_client"

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Bot API
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –û—Ç—Ä–∏–º–∞–π—Ç–µ —É @BotFather

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Storage Box
STORAGE_BOX_HOST = os.getenv("STORAGE_BOX_HOST")
STORAGE_BOX_USERNAME = os.getenv("STORAGE_BOX_USERNAME")
STORAGE_BOX_PASSWORD = os.getenv("STORAGE_BOX_PASSWORD")
STORAGE_BOX_PATH = os.getenv("STORAGE_BOX_PATH")

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è AI (–¥–æ–¥–∞–π—Ç–µ —Å–≤–æ—ó –∫–ª—é—á—ñ)
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")  # –ê–±–æ –≤—Å—Ç–∞–≤—Ç–µ –∫–ª—é—á —Ç—É—Ç
ANTHROPIC_API_KEY = os.getenv("ANTHROPIC_API_KEY")  # –ê–±–æ –≤—Å—Ç–∞–≤—Ç–µ –∫–ª—é—á —Ç—É—Ç
AI_PROVIDER = os.getenv("AI_PROVIDER")  # "openai" –∞–±–æ "anthropic"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è AI –∫–ª—ñ—î–Ω—Ç—ñ–≤
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None
anthropic_client = AsyncAnthropic(api_key=ANTHROPIC_API_KEY) if ANTHROPIC_API_KEY else None
AI_ENABLED = bool(openai_client or anthropic_client)

# –Ü–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—ñ–≤ —Å–∞–º–æ–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó (–ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó logger)
OPTIMIZATION_ENABLED = False
SelfOptimizer = None
PerformanceMonitor = None
CacheManager = None
AICodeImprover = None
PerformanceMetrics = None
performance_tracked = None
AdaptiveRateLimiter = None
CodeAnalyzer = None
AutoPatcher = None

try:
    from self_optimizer import SelfOptimizer as _SelfOptimizer, PerformanceMetrics as _PerformanceMetrics
    from performance_monitor import (
        PerformanceMonitor as _PerformanceMonitor,
        performance_tracked as _performance_tracked,
        CacheManager as _CacheManager,
        AdaptiveRateLimiter as _AdaptiveRateLimiter
    )
    from ai_code_improver import (
        AICodeImprover as _AICodeImprover,
        CodeAnalyzer as _CodeAnalyzer,
        AutoPatcher as _AutoPatcher
    )

    SelfOptimizer = _SelfOptimizer
    PerformanceMetrics = _PerformanceMetrics
    PerformanceMonitor = _PerformanceMonitor
    performance_tracked = _performance_tracked
    CacheManager = _CacheManager
    AdaptiveRateLimiter = _AdaptiveRateLimiter
    AICodeImprover = _AICodeImprover
    CodeAnalyzer = _CodeAnalyzer
    AutoPatcher = _AutoPatcher

    OPTIMIZATION_ENABLED = True
except ImportError as import_exc:
    print(f"‚ö†Ô∏è –ú–æ–¥—É–ª—ñ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ: {import_exc}")
    print("   –ë–æ—Ç –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ –±–µ–∑ —Å–∏—Å—Ç–µ–º–∏ —Å–∞–º–æ–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∑–∞–≥–ª—É—à–∫–∏ –≤ except –±–ª–æ—Ü—ñ
    _SelfOptimizer = None
    _PerformanceMetrics = None
    _PerformanceMonitor = None
    _performance_tracked = None
    _CacheManager = None
    _AdaptiveRateLimiter = None
    _AICodeImprover = None
    _CodeAnalyzer = None
    _AutoPatcher = None

    SelfOptimizer = None
    PerformanceMetrics = None
    PerformanceMonitor = None
    performance_tracked = None
    CacheManager = None
    AdaptiveRateLimiter = None
    AICodeImprover = None
    CodeAnalyzer = None
    AutoPatcher = None

# UUID –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø—É –¥–æ –±–æ—Ç–∞
ALLOWED_UUID = "f7e94a9f-347c-5090-affa-418526e99a29"
# User ID –¥–ª—è Client API (–æ—Ç—Ä–∏–º–∞–π—Ç–µ —á–µ—Ä–µ–∑ @userinfobot)
ALLOWED_USER_ID = 672513783  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à Telegram ID

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–º–æ–∂–Ω–∞ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞)
settings = {
    'save_saved_messages': True,   # –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ "–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
    'save_private_chats': True,    # –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ñ —á–∞—Ç–∏ (–Ω–µ —Å–µ–∫—Ä–µ—Ç–Ω—ñ)
    'save_groups': False,           # –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ –≥—Ä—É–ø–∏
    'save_channels': False,         # –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ –∫–∞–Ω–∞–ª–∏
    'check_interval': 0.5,          # –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ "–ó–±–µ—Ä–µ–∂–µ–Ω–∏—Ö" (—Å–µ–∫—É–Ω–¥–∏)
    'dialogs_check_interval': 5,   # –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥—ñ–∞–ª–æ–≥—ñ–≤ (—Å–µ–∫—É–Ω–¥–∏)
    'dialogs_limit': 20,            # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥—ñ–∞–ª–æ–≥—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    'messages_per_dialog': 5,       # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –∫–æ–∂–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É
}

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∞—Ç–∏
CURRENT_DATE = datetime.now().strftime("%Y-%m-%d")



# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –ª–æ–∫–∞–ª—å–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
def cleanup_old_local_files():
    """–í–∏–¥–∞–ª—è—î —Å—Ç–∞—Ä—ñ –ª–æ–∫–∞–ª—å–Ω—ñ —Ñ–∞–π–ª–∏ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ (–Ω–µ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –¥–Ω—è)"""
    try:
        current_date = datetime.now().strftime("%Y-%m-%d")
        current_file = f"saved_messages_{current_date}.json"

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ —Ñ–∞–π–ª–∏ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
        message_files = [f for f in os.listdir('.') if f.startswith('saved_messages_') and f.endswith('.json')]

        deleted_count = 0
        for file in message_files:
            if file != current_file:
                try:
                    os.remove(file)
                    logger.info(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–∏–π –ª–æ–∫–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª: {file}")
                    deleted_count += 1
                except Exception as file_exc:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É {file}: {file_exc}")

        if deleted_count > 0:
            logger.info(f"‚úÖ –û—á–∏—â–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä–∏—Ö –ª–æ–∫–∞–ª—å–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤")
        else:
            logger.debug("üìÅ –ù–µ–º–∞—î —Å—Ç–∞—Ä–∏—Ö –ª–æ–∫–∞–ª—å–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")

    except Exception as cleanup_exc:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ —Å—Ç–∞—Ä–∏—Ö —Ñ–∞–π–ª—ñ–≤: {cleanup_exc}")

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
user_viewing_state: Dict[str, Dict[str, Any]] = {}  # –ö–ª—é—á - str (user_id_filename)
files_cache: Dict[str, List[str]] = {}  # –ö–ª—é—á - str (user_id)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø—É –¥–æ –±–æ—Ç–∞
def check_access(user_id):
    user_uuid = str(uuid.uuid5(uuid.NAMESPACE_OID, str(user_id)))
    return user_uuid == ALLOWED_UUID or str(user_id) == ALLOWED_UUID

class StorageBoxManager:
    def __init__(self):
        self.ssh = paramiko.SSHClient()
        self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        
    def connect(self):
        try:
            self.ssh.connect(
                STORAGE_BOX_HOST,
                username=STORAGE_BOX_USERNAME,
                password=STORAGE_BOX_PASSWORD
            )
            return True
        except Exception as conn_exc:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Storage Box: {conn_exc}")
            return False
            
    def upload_file(self, local_path, remote_filename):
        try:
            sftp = self.ssh.open_sftp()

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ–≤–Ω–∏–π —à–ª—è—Ö (–º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ø—ñ–¥–ø–∞–ø–∫–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ logs/bot_2025-10-08.log)
            full_remote_path = STORAGE_BOX_PATH + remote_filename

            # –í–∏—Ç—è–≥—É—î–º–æ –≤—Å—ñ –ø–∞–ø–∫–∏ –∑ —à–ª—è—Ö—É
            remote_dir = os.path.dirname(full_remote_path)
            path_parts = remote_dir.strip('/').split('/')
            current_path = ''

            # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—Å—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
            for part in path_parts:
                if not part:  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ —á–∞—Å—Ç–∏–Ω–∏
                    continue
                current_path += '/' + part
                try:
                    sftp.chdir(current_path)
                    logger.debug(f"‚úÖ –ü–∞–ø–∫–∞ —ñ—Å–Ω—É—î: {current_path}")
                except (IOError, OSError):
                    try:
                        sftp.mkdir(current_path)
                        logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–∞–ø–∫—É: {current_path}")
                    except Exception as mkdir_error:
                        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–ø–∫—É {current_path}: {mkdir_error}")

            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª
            sftp.put(local_path, full_remote_path)
            sftp.close()
            logger.info(f"‚úÖ –§–∞–π–ª {local_path} —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –Ω–∞ Storage Box —è–∫ {remote_filename}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")
            return False
            
    def list_files(self):
        try:
            sftp = self.ssh.open_sftp()
            try:
                sftp.chdir(STORAGE_BOX_PATH)
            except (IOError, OSError):
                logger.warning(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ {STORAGE_BOX_PATH} –Ω–µ —ñ—Å–Ω—É—î - –ø–æ–≤–µ—Ä—Ç–∞—é –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫")
                sftp.close()
                return []

            files = sftp.listdir()
            sftp.close()

            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ñ–∞–π–ª–∏ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
            message_files = [f for f in files if f.startswith('saved_messages_') and f.endswith('.json')]
            logger.info(f"üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: {len(message_files)}")
            return sorted(message_files, reverse=True)
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ñ–∞–π–ª—ñ–≤: {e}")
            return []
            
    def download_file(self, remote_filename):
        try:
            sftp = self.ssh.open_sftp()
            remote_path = os.path.join(STORAGE_BOX_PATH, remote_filename)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
            if not os.path.exists("temp"):
                os.makedirs("temp")
                
            local_path = os.path.join("temp", remote_filename)
            sftp.get(remote_path, local_path)
            sftp.close()
            
            return local_path
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—á—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É {remote_filename}: {e}")
            return None
            
    def close(self):
        self.ssh.close()

# AI –ê—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –ø–æ–º–∏–ª–æ–∫
class AIAssistant:
    def __init__(self):
        self.error_history = []
        self.max_history = 10

    async def analyze_error(self, error_text: str, context: str = "") -> dict:
        """–ê–Ω–∞–ª—ñ–∑—É—î –ø–æ–º–∏–ª–∫—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é AI"""
        try:
            # –§–æ—Ä–º—É—î–º–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è AI
            prompt = f"""–¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç Python —Ä–æ–∑—Ä–æ–±–Ω–∏–∫. –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ü—é –ø–æ–º–∏–ª–∫—É –≤ Telegram –±–æ—Ç—ñ:

–ü–û–ú–ò–õ–ö–ê:
{error_text}

–ö–û–ù–¢–ï–ö–°–¢:
{context}

–ö–û–î –ë–û–¢–ê:
- –ì—ñ–±—Ä–∏–¥–Ω–∏–π –±–æ—Ç (Pyrogram Client API + python-telegram-bot Bot API)
- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ JSON
- –ë–µ–∫–∞–ø –Ω–∞ Hetzner Storage Box —á–µ—Ä–µ–∑ SFTP
- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î asyncio, APScheduler

–ù–∞–¥–∞–π:
1. üîç –ü–†–ò–ß–ò–ù–ê: –ß–æ–º—É –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ (–∫–æ—Ä–æ—Ç–∫–æ)
2. üí° –†–Ü–®–ï–ù–ù–Ø: –Ø–∫ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –∫—Ä–æ–∫–∏)
3. üîß –ö–û–î: –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ - –ø–æ–∫–∞–∂–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫–æ–¥
4. ‚ö†Ô∏è –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø: –©–æ –º–æ–∂–µ —Å—Ç–∞—Ç–∏—Å—è —è–∫—â–æ –Ω–µ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏

–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, –∫–æ—Ä–æ—Ç–∫–æ —ñ –∑—Ä–æ–∑—É–º—ñ–ª–æ."""

            if AI_PROVIDER == "openai" and openai_client:
                from openai.types.chat import ChatCompletionSystemMessageParam, ChatCompletionUserMessageParam
                response = await openai_client.chat.completions.create(
                    model="gpt-4o-mini",  # –®–≤–∏–¥–∫–∞ —ñ –¥–µ—à–µ–≤–∞ –º–æ–¥–µ–ª—å
                    messages=[
                        ChatCompletionSystemMessageParam(role="system", content="–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç Python —Ä–æ–∑—Ä–æ–±–Ω–∏–∫, —è–∫–∏–π –¥–æ–ø–æ–º–∞–≥–∞—î –≤–∏–ø—Ä–∞–≤–ª—è—Ç–∏ –ø–æ–º–∏–ª–∫–∏ –≤ –∫–æ–¥—ñ."),
                        ChatCompletionUserMessageParam(role="user", content=prompt)
                    ],
                    max_tokens=1000,
                    temperature=0.7
                )
                analysis = response.choices[0].message.content

            elif AI_PROVIDER == "anthropic" and anthropic_client:
                from anthropic.types import MessageParam
                response = await anthropic_client.messages.create(
                    model="claude-3-5-sonnet-20241022",
                    max_tokens=1000,
                    messages=[
                        MessageParam(role="user", content=prompt)
                    ]
                )
                analysis = response.content[0].text
            else:
                return {
                    "success": False,
                    "error": "AI –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –î–æ–¥–∞–π—Ç–µ API –∫–ª—é—á –≤ –∫–æ–¥."
                }

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é
            self.error_history.append({
                "timestamp": datetime.now().isoformat(),
                "error": error_text[:200],
                "analysis": analysis[:500]
            })

            # –û–±–º–µ–∂—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é
            if len(self.error_history) > self.max_history:
                self.error_history.pop(0)

            return {
                "success": True,
                "analysis": analysis,
                "provider": AI_PROVIDER
            }

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ AI –∞–Ω–∞–ª—ñ–∑—É: {e}")
            return {
                "success": False,
                "error": str(e)
            }

    @staticmethod
    async def suggest_fix(code_snippet: str, error_msg: str) -> str:
        """–ü—Ä–æ–ø–æ–Ω—É—î –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∫–æ–¥—É"""
        try:
            prompt = f"""–í–∏–ø—Ä–∞–≤ —Ü–µ–π –∫–æ–¥ Python:

–ö–û–î:
```python
{code_snippet}
```

–ü–û–ú–ò–õ–ö–ê:
{error_msg}

–ü–æ–≤–µ—Ä–Ω–∏ –¢–Ü–õ–¨–ö–ò –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫–æ–¥ –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω—å."""

            if AI_PROVIDER == "openai" and openai_client:
                from openai.types.chat import ChatCompletionSystemMessageParam, ChatCompletionUserMessageParam
                response = await openai_client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=[
                        ChatCompletionSystemMessageParam(role="system", content="–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç Python. –í–∏–ø—Ä–∞–≤–ª—è–π –∫–æ–¥ –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω—å."),
                        ChatCompletionUserMessageParam(role="user", content=prompt)
                    ],
                    max_tokens=500,
                    temperature=0.3
                )
                return response.choices[0].message.content

            elif AI_PROVIDER == "anthropic" and anthropic_client:
                from anthropic.types import MessageParam
                response = await anthropic_client.messages.create(
                    model="claude-3-5-sonnet-20241022",
                    max_tokens=500,
                    messages=[
                        MessageParam(role="user", content=prompt)
                    ]
                )
                return response.content[0].text
            else:
                return "AI –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: {e}")
            return f"–ü–æ–º–∏–ª–∫–∞: {e}"

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π AI –∞—Å–∏—Å—Ç–µ–Ω—Ç
ai_assistant = AIAssistant()

# –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø–æ–º–∏–ª–æ–∫
class ErrorMonitor:
    def __init__(self):
        self.errors = []
        self.max_errors = 50
        self.notification_sent = {}

    async def log_error(self, error: Exception, context: str = ""):
        """–õ–æ–≥—É—î –ø–æ–º–∏–ª–∫—É —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"""
        try:
            error_info = {
                "timestamp": datetime.now().isoformat(),
                "type": type(error).__name__,
                "message": str(error),
                "traceback": traceback.format_exc(),
                "context": context
            }

            self.errors.append(error_info)
            if len(self.errors) > self.max_errors:
                self.errors.pop(0)

            # –õ–æ–≥—É—î–º–æ –≤ —Ñ–∞–π–ª
            logger.error(f"‚ùå {context}: {error}", exc_info=True)

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É (–Ω–µ —á–∞—Å—Ç—ñ—à–µ 1 —Ä–∞–∑—É –Ω–∞ 5 —Ö–≤–∏–ª–∏–Ω –¥–ª—è –æ–¥–Ω–∞–∫–æ–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫)
            error_key = f"{type(error).__name__}_{context}"
            last_notification = self.notification_sent.get(error_key, 0)
            current_time = datetime.now().timestamp()

            if current_time - last_notification > 300:  # 5 —Ö–≤–∏–ª–∏–Ω
                await self.notify_admin(error_info)
                self.notification_sent[error_key] = current_time

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ ErrorMonitor: {e}")

    @staticmethod
    async def notify_admin(error_info: dict):
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –ø—Ä–æ –ø–æ–º–∏–ª–∫—É"""
        try:
            if not bot_app:
                return

            message = f"""üö® **–ü–û–ú–ò–õ–ö–ê –í –ë–û–¢–Ü**

‚è∞ –ß–∞—Å: {datetime.fromisoformat(error_info['timestamp']).strftime('%H:%M:%S')}
üî¥ –¢–∏–ø: `{error_info['type']}`
üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç: {error_info['context']}

üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:
```
{error_info['message'][:200]}
```

ü§ñ AI –∞–Ω–∞–ª—ñ–∑—É—î –ø–æ–º–∏–ª–∫—É..."""

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await bot_app.bot.send_message(
                chat_id=ALLOWED_USER_ID,
                text=message,
                parse_mode='Markdown'
            )

            # –ó–∞–ø—É—Å–∫–∞—î–º–æ AI –∞–Ω–∞–ª—ñ–∑
            analysis = await ai_assistant.analyze_error(
                error_text=error_info['traceback'][:1000],
                context=error_info['context']
            )

            if analysis['success']:
                await bot_app.bot.send_message(
                    chat_id=ALLOWED_USER_ID,
                    text=f"ü§ñ **AI –ê–Ω–∞–ª—ñ–∑ ({analysis['provider']}):**\n\n{analysis['analysis']}",
                    parse_mode='Markdown'
                )

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {e}")

    def get_recent_errors(self, limit: int = 10) -> list:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–º–∏–ª–∫–∏"""
        return self.errors[-limit:]

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä –ø–æ–º–∏–ª–æ–∫
error_monitor = ErrorMonitor()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
def get_main_keyboard():
    """–°—Ç–≤–æ—Ä—é—î –≥–æ–ª–æ–≤–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –±–æ—Ç–∞"""
    keyboard = [
        [
            KeyboardButton("üìä –°—Ç–∞—Ç—É—Å"),
            KeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        ],
        [
            KeyboardButton("üíæ –ë–µ–∫–∞–ø"),
            KeyboardButton("üìÇ –Ü—Å—Ç–æ—Ä—ñ—è")
        ],
        [
            KeyboardButton("ü§ñ AI –ü–æ–º—ñ—á–Ω–∏–∫"),
            KeyboardButton("üìù –õ–æ–≥–∏")
        ],
        [
            KeyboardButton("üîß –¢–µ—Ö–Ω—ñ—á–Ω–µ"),
            KeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")
        ]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Ö–Ω—ñ—á–Ω–æ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
def get_technical_keyboard():
    """–°—Ç–≤–æ—Ä—é—î —Ç–µ—Ö–Ω—ñ—á–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É"""
    keyboard = [
        [
            KeyboardButton("üîå –°—Ç–∞—Ç—É—Å Client API"),
            KeyboardButton("üß™ –¢–µ—Å—Ç")
        ],
        [
            KeyboardButton("üîç –°–∫–∞–Ω—É–≤–∞—Ç–∏"),
            KeyboardButton("üóÇÔ∏è Debug")
        ],
        [
            KeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ —Ñ–∞–π–ª–∏")
        ],
        [
            KeyboardButton("üîô –ù–∞–∑–∞–¥")
        ]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –ª–æ–≥—ñ–≤
def get_logs_keyboard():
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ª–æ–≥–∞–º–∏"""
    keyboard = [
        [
            KeyboardButton("üì§ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ª–æ–≥–∏"),
            KeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –ª–æ–≥–∏")
        ],
        [
            KeyboardButton("üìã –û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–º–∏–ª–∫–∏"),
            KeyboardButton("üîô –ù–∞–∑–∞–¥")
        ]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è AI –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
def get_ai_keyboard():
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è AI –ø–æ–º—ñ—á–Ω–∏–∫–∞"""
    keyboard = [
        [
            KeyboardButton("üîç –ê–Ω–∞–ª—ñ–∑ –ø–æ–º–∏–ª–æ–∫"),
            KeyboardButton("üìä –Ü—Å—Ç–æ—Ä—ñ—è –∞–Ω–∞–ª—ñ–∑—ñ–≤")
        ],
        [
            KeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è AI"),
            KeyboardButton("üîô –ù–∞–∑–∞–¥")
        ]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–∞–Ω–∏–º–∏
def get_current_data_file():
    """–ü–æ–≤–µ—Ä—Ç–∞—î —ñ–º'—è —Ñ–∞–π–ª—É –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∞—Ç–∏"""
    current_date = datetime.now().strftime("%Y-%m-%d")
    return f"saved_messages_{current_date}.json"

def load_messages():
    data_file = get_current_data_file()
    if os.path.exists(data_file):
        with open(data_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {"messages": []}

def save_message(message_data):
    data = load_messages()
    data["messages"].append(message_data)

    data_file = get_current_data_file()
    with open(data_file, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

    # –ö–æ–º–ø–∞–∫—Ç–Ω–∏–π –≤–∏–≤—ñ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    chat_name = message_data.get('chat_title', '–ó–±–µ—Ä–µ–∂–µ–Ω—ñ')
    msg_time = datetime.fromisoformat(message_data['date']).strftime('%H:%M:%S')
    msg_text = message_data.get('text', '[–º–µ–¥—ñ–∞]')[:50]  # –ü–µ—Ä—à—ñ 50 —Å–∏–º–≤–æ–ª—ñ–≤

    print(f"üíæ {chat_name} | {msg_time} | {msg_text}")

    logger.info(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message_data['message_id']}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª—É –Ω–∞ Storage Box
async def upload_to_storage_box():
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ñ–∞–π–ª –ø–æ—Ç–æ—á–Ω–æ–≥–æ –¥–Ω—è
    data_file = get_current_data_file()

    if not os.path.exists(data_file):
        logger.info("–ù–µ–º–∞—î —Ñ–∞–π–ª—É –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å—å–æ–≥–æ–¥–Ω—ñ")
        return

    # –°—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—É –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É –∑ –¥–∞—Ç–æ—é
    file_date = datetime.now().strftime("%Y-%m-%d")
    remote_filename = f"saved_messages_{file_date}.json"

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª –Ω–∞ Storage Box
    storage_box = StorageBoxManager()
    if storage_box.connect():
        success = storage_box.upload_file(data_file, remote_filename)
        storage_box.close()

        if success:
            logger.info(f"‚úÖ –§–∞–π–ª {data_file} —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
            logger.info(f"üìÅ –õ–æ–∫–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ—á–∏—â–µ–Ω–Ω—è –æ 01:00")
        else:
            logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª –Ω–∞ Storage Box - –ª–æ–∫–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
    else:
        logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ Storage Box - –ª–æ–∫–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ª–æ–≥—ñ–≤ –Ω–∞ Storage Box
async def upload_logs_to_storage_box():
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å—Ç–∞—Ä—ñ –ª–æ–≥-—Ñ–∞–π–ª–∏ –Ω–∞ Storage Box"""
    try:
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –ª–æ–≥-—Ñ–∞–π–ª–∏
        log_files = [f for f in os.listdir('.') if f.startswith('bot_') and f.endswith('.log')]

        if not log_files:
            logger.info("–ù–µ–º–∞—î –ª–æ–≥-—Ñ–∞–π–ª—ñ–≤ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏")
            return

        storage_box = StorageBoxManager()
        if not storage_box.connect():
            logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ Storage Box –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ª–æ–≥—ñ–≤")
            return

        uploaded_count = 0
        for log_file in log_files:
            # –ù–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –ª–æ–≥-—Ñ–∞–π–ª
            if log_file == get_log_filename():
                continue

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            remote_filename = f"logs/{log_file}"
            if storage_box.upload_file(log_file, remote_filename):
                uploaded_count += 1
                logger.info(f"‚úÖ –õ–æ–≥ {log_file} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
            else:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ª–æ–≥—É {log_file}")

        storage_box.close()
        logger.info(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {uploaded_count} –ª–æ–≥-—Ñ–∞–π–ª—ñ–≤ –Ω–∞ Storage Box")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ª–æ–≥—ñ–≤: {e}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –ª–æ–≥—ñ–≤
def cleanup_old_logs():
    """–í–∏–¥–∞–ª—è—î –í–°–Ü —Å—Ç–∞—Ä—ñ –ª–æ–≥-—Ñ–∞–π–ª–∏ (–∫—Ä—ñ–º –ø–æ—Ç–æ—á–Ω–æ–≥–æ)"""
    try:
        current_log = get_log_filename()
        deleted_count = 0

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –ª–æ–≥-—Ñ–∞–π–ª–∏
        log_files = [f for f in os.listdir('.') if f.startswith('bot_') and f.endswith('.log')]

        for log_file in log_files:
            # –ù–µ –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –ª–æ–≥-—Ñ–∞–π–ª
            if log_file == current_log:
                continue

            try:
                os.remove(log_file)
                deleted_count += 1
                logger.info(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–∏–π –ª–æ–≥: {log_file}")
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª {log_file}: {e}")

        if deleted_count > 0:
            logger.info(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä–∏—Ö –ª–æ–≥-—Ñ–∞–π–ª—ñ–≤")
        else:
            logger.debug("üìÅ –ù–µ–º–∞—î —Å—Ç–∞—Ä–∏—Ö –ª–æ–≥-—Ñ–∞–π–ª—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –ª–æ–≥—ñ–≤: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è event loop
main_loop: asyncio.AbstractEventLoop | None = None

# –§—É–Ω–∫—Ü—ñ—è-–æ–±–≥–æ—Ä—Ç–∫–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
def upload_to_storage_box_sync():
    if main_loop is not None and main_loop.is_running():
        asyncio.run_coroutine_threadsafe(upload_to_storage_box(), main_loop)
    else:
        logger.warning("Event loop –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è")

# –§—É–Ω–∫—Ü—ñ—è-–æ–±–≥–æ—Ä—Ç–∫–∞ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ª–æ–≥—ñ–≤
def upload_logs_sync():
    if main_loop is not None and main_loop.is_running():
        asyncio.run_coroutine_threadsafe(upload_logs_to_storage_box(), main_loop)
    else:
        logger.warning("Event loop –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ª–æ–≥—ñ–≤")

# –§—É–Ω–∫—Ü—ñ—è-–æ–±–≥–æ—Ä—Ç–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
def auto_scan_sync():
    if main_loop is not None and main_loop.is_running():
        asyncio.run_coroutine_threadsafe(fetch_recent_messages(), main_loop)
    else:
        logger.warning("Event loop –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è")

# –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
def setup_scheduler():
    scheduler = BackgroundScheduler()

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ 23:59 –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è
    scheduler.add_job(upload_to_storage_box_sync, 'cron', hour=23, minute=59)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ª–æ–≥–∏ –æ 23:58 (–ø–µ—Ä–µ–¥ –±–µ–∫–∞–ø–æ–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å)
    scheduler.add_job(upload_logs_sync, 'cron', hour=23, minute=58)

    # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ –ª–æ–≥–∏ —Ç–∞ —Ñ–∞–π–ª–∏ –æ 01:00 (–ø—ñ—Å–ª—è –±–µ–∫–∞–ø—É)
    scheduler.add_job(cleanup_old_logs, 'cron', hour=1, minute=0)
    scheduler.add_job(cleanup_old_local_files, 'cron', hour=1, minute=0)

    scheduler.start()
    logger.info("–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ:")
    logger.info("- –©–æ–¥–µ–Ω–Ω–µ —Ä–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –æ 23:59")
    logger.info("- –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ª–æ–≥—ñ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –æ 23:58")
    logger.info("- –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –ª–æ–≥—ñ–≤ —Ç–∞ —Ñ–∞–π–ª—ñ–≤ –æ 01:00")
    logger.info("- –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ–∂–Ω—ñ 0.5 —Å–µ–∫—É–Ω–¥–∏")
    return scheduler

# ============= TELEGRAM CLIENT (–¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å) =============

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
client_app = Client(
    SESSION_NAME,
    api_id=API_ID,
    api_hash=API_HASH,
    in_memory=False,  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–µ—Å—ñ—é –Ω–∞ –¥–∏—Å–∫—É
    workers=1  # –û–¥–∏–Ω –≤–æ—Ä–∫–µ—Ä –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏
)

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –ª—ñ—á—ñ–ª—å–Ω–∏–∫ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
message_counter = 0

# –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
LAST_MESSAGE_ID_FILE = "last_message_id.txt"

def get_last_message_id():
    if os.path.exists(LAST_MESSAGE_ID_FILE):
        with open(LAST_MESSAGE_ID_FILE, 'r') as f:
            return int(f.read().strip())
    return 0

def save_last_message_id(message_id):
    with open(LAST_MESSAGE_ID_FILE, 'w') as f:
        f.write(str(message_id))

async def quick_message_check():
    """–®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ–∂–Ω—ñ 0.5 —Å–µ–∫—É–Ω–¥–∏"""
    try:
        last_saved_id = get_last_message_id()
        new_messages_count = 0
        latest_message_id = last_saved_id

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
        data = load_messages()
        existing_ids = set(msg['message_id'] for msg in data['messages'])

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ "–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è" –±–µ–∑ –ª—ñ–º—ñ—Ç—É
        # –ê–ª–µ –∑—É–ø–∏–Ω—è—î–º–æ—Å—è –∫–æ–ª–∏ –∑–Ω–∞—Ö–æ–¥–∏–º–æ —Å—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if settings['save_saved_messages']:
            async for message in client_app.get_chat_history("me"):
                # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ —Ç–µ–∫—Å—Ç—É
                if not message.text:
                    continue

                # –ó—É–ø–∏–Ω—è—î–º–æ—Å—è –∫–æ–ª–∏ –¥—ñ–π—à–ª–∏ –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                if message.id <= last_saved_id:
                    break  # –û—Å–∫—ñ–ª—å–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –π–¥—É—Ç—å –≤ –ø–æ—Ä—è–¥–∫—É –≤—ñ–¥ –Ω–æ–≤–∏—Ö –¥–æ —Å—Ç–∞—Ä–∏—Ö

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤–∂–µ (–¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ)
                if message.id not in existing_ids:
                    logger.info(f"‚ö° –®–í–ò–î–ö–ï –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø (Saved): {message.id} - {message.text[:50]}...")

                    message_data = {
                        "message_id": message.id,
                        "chat_id": message.chat.id,
                        "chat_type": "SAVED_MESSAGES",
                        "chat_title": "–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
                        "chat_username": None,
                        "from_user_id": message.from_user.id if message.from_user else ALLOWED_USER_ID,
                        "from_username": message.from_user.username if message.from_user else None,
                        "from_first_name": message.from_user.first_name if message.from_user else "Me",
                        "text": message.text,
                        "date": message.date.isoformat(),
                        "is_outgoing": (message.from_user.id == ALLOWED_USER_ID) if message.from_user else True,
                        "is_edited": False
                    }

                    save_message(message_data)
                    new_messages_count += 1

                    # –î–æ–¥–∞—î–º–æ –¥–æ —ñ—Å–Ω—É—é—á–∏—Ö ID —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –≤ —Ü—ñ–π –∂–µ —ñ—Ç–µ—Ä–∞—Ü—ñ—ó
                    existing_ids.add(message.id)

                    # –û–Ω–æ–≤–ª—é—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π ID
                    if message.id > latest_message_id:
                        latest_message_id = message.id

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π ID
        if latest_message_id > last_saved_id:
            save_last_message_id(latest_message_id)

        if new_messages_count > 0:
            logger.info(f"‚ö° –®–≤–∏–¥–∫–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ {new_messages_count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å!")

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —à–≤–∏–¥–∫–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥—ñ–∞–ª–æ–≥—ñ–≤
last_dialogs_check = 0

async def check_private_chats():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö —á–∞—Ç—ñ–≤ –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥"""
    global last_dialogs_check

    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö —á–∞—Ç—ñ–≤
        if not settings['save_private_chats'] and not settings['save_groups'] and not settings['save_channels']:
            return

        current_time = asyncio.get_event_loop().time()

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥—ñ–∞–ª–æ–≥–∏ –∑ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–º —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        if current_time - last_dialogs_check < settings['dialogs_check_interval']:
            return

        last_dialogs_check = current_time

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        data = load_messages()
        existing_ids = set(msg['message_id'] for msg in data['messages'])
        new_messages_count = 0

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –¥—ñ–∞–ª–æ–≥–∏ –∑ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é
        dialog_count = 0
        async for dialog in client_app.get_dialogs(limit=settings['dialogs_limit']):
            dialog_count += 1
            chat = dialog.chat

            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ "–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è" (–≤–æ–Ω–∏ –ø–µ—Ä–µ–≤—ñ—Ä—è—é—Ç—å—Å—è –æ–∫—Ä–µ–º–æ)
            if chat.id == ALLOWED_USER_ID:
                continue

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø —á–∞—Ç—É
            chat_type_str = str(chat.type).upper()

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ —Ü–µ–π —á–∞—Ç
            should_check = False
            if 'PRIVATE' in chat_type_str and settings['save_private_chats']:
                should_check = True
            elif ('GROUP' in chat_type_str or 'SUPERGROUP' in chat_type_str) and settings['save_groups']:
                should_check = True
            elif 'CHANNEL' in chat_type_str and settings['save_channels']:
                should_check = True

            if not should_check:
                continue

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ü—å–æ–≥–æ —á–∞—Ç—É (–∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º)
            try:
                message_count = 0
                async for message in client_app.get_chat_history(chat.id, limit=settings['messages_per_dialog']):
                    message_count += 1

                    # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ —Ç–µ–∫—Å—Ç—É
                    if not message.text:
                        continue

                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤–∂–µ
                    if message.id in existing_ids:
                        continue

                    logger.info(f"‚ö° –®–í–ò–î–ö–ï –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø (Private): {message.id} –≤—ñ–¥ {chat.id} - {message.text[:50]}...")

                    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —á–∞—Ç—É —Ç–∞ –Ω–∞–∑–≤—É
                    chat_type = str(chat.type)
                    chat_title = getattr(chat, 'title', None)

                    # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö —á–∞—Ç—ñ–≤ –¥–æ–¥–∞—î–º–æ —ñ–º'—è
                    if 'PRIVATE' in chat_type.upper():
                        if hasattr(chat, 'first_name'):
                            chat_title = chat.first_name
                            if hasattr(chat, 'last_name') and chat.last_name:
                                chat_title += f" {chat.last_name}"

                    message_data = {
                        "message_id": message.id,
                        "chat_id": chat.id,
                        "chat_type": chat_type,
                        "chat_title": chat_title,
                        "chat_username": getattr(chat, 'username', None),
                        "from_user_id": message.from_user.id if message.from_user else ALLOWED_USER_ID,
                        "from_username": message.from_user.username if message.from_user else None,
                        "from_first_name": message.from_user.first_name if message.from_user else "Unknown",
                        "text": message.text,
                        "date": message.date.isoformat(),
                        "is_outgoing": (message.from_user.id == ALLOWED_USER_ID) if message.from_user else False,
                        "is_edited": False
                    }

                    save_message(message_data)
                    new_messages_count += 1
                    existing_ids.add(message.id)

            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∞—Ç—É {chat.id}: {e}")
                continue

        if new_messages_count > 0:
            logger.info(f"‚ö° –®–≤–∏–¥–∫–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ {new_messages_count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö —á–∞—Ç—ñ–≤!")

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö —á–∞—Ç—ñ–≤: {e}")

async def message_checker_loop():
    """–ë–µ–∑–∫—ñ–Ω–µ—á–Ω–∏–π —Ü–∏–∫–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    logger.info(f"‚ö° –ó–∞–ø—É—Å–∫–∞—é —à–≤–∏–¥–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ–∂–Ω—ñ {settings['check_interval']} —Å–µ–∫—É–Ω–¥–∏...")
    logger.info(f"üì± –ó–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {'‚úÖ' if settings['save_saved_messages'] else '‚ùå'}")
    logger.info(f"üí¨ –ü—Ä–∏–≤–∞—Ç–Ω—ñ —á–∞—Ç–∏: {'‚úÖ' if settings['save_private_chats'] else '‚ùå'}")
    logger.info(f"üë• –ì—Ä—É–ø–∏: {'‚úÖ' if settings['save_groups'] else '‚ùå'}")
    logger.info(f"üì¢ –ö–∞–Ω–∞–ª–∏: {'‚úÖ' if settings['save_channels'] else '‚ùå'}")

    while True:
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ "–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è" –∑ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–º —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
            await quick_message_check()

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∏–≤–∞—Ç–Ω—ñ —á–∞—Ç–∏ (—Ñ—É–Ω–∫—Ü—ñ—è —Å–∞–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é—î —á–∞—Å—Ç–æ—Ç—É)
            await check_private_chats()

            await asyncio.sleep(settings['check_interval'])  # –ó–∞—Ç—Ä–∏–º–∫–∞ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {e}")
            await asyncio.sleep(1)  # –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ —á–µ–∫–∞—î–º–æ –¥–æ–≤—à–µ

# –û–±—Ä–æ–±–Ω–∏–∫ RAW updates –¥–ª—è –º–∏—Ç—Ç—î–≤–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@client_app.on_raw_update()
async def handle_raw_update(_client: Client, update, users, _chats):
    global message_counter

    try:
        # –õ–æ–≥—É—î–º–æ –¢–ò–ü –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        update_type = type(update).__name__
        logger.info(f"üîç RAW UPDATE TYPE: {update_type}")

        # –û–±—Ä–æ–±–ª—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –æ–Ω–æ–≤–ª–µ–Ω—å
        message_to_process = None

        # 1. –ü—Ä—è–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if hasattr(update, 'message') and update.message:
            message_to_process = update.message
            logger.info("üì® –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä—è–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")

        # 2. –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ –Ω–æ–≤–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
        elif hasattr(update, 'updates') and update.updates:
            logger.info(f"üì¶ –ó–Ω–∞–π–¥–µ–Ω–æ {len(update.updates)} –≤–∫–ª–∞–¥–µ–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å")
            for sub_update in update.updates:
                sub_type = type(sub_update).__name__
                logger.info(f"   üî∏ –ü—ñ–¥—Ç–∏–ø: {sub_type}")

                if hasattr(sub_update, 'message') and sub_update.message:
                    message_to_process = sub_update.message
                    logger.info("   üì® –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –≤–∫–ª–∞–¥–µ–Ω–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ")
                    break

        # 3. UpdateNewMessage
        elif update_type == 'UpdateNewMessage' and hasattr(update, 'message'):
            message_to_process = update.message
            logger.info("üì® –ó–Ω–∞–π–¥–µ–Ω–æ UpdateNewMessage")

        # 4. UpdateShortMessage
        elif update_type == 'UpdateShortMessage':
            logger.info("üì® –ó–Ω–∞–π–¥–µ–Ω–æ UpdateShortMessage")
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Å–µ–≤–¥–æ-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ UpdateShortMessage
            if hasattr(update, 'message') and hasattr(update, 'user_id'):
                message_to_process = type('Message', (), {
                    'id': update.id,
                    'message': update.message,
                    'date': update.date,
                    'out': getattr(update, 'out', False),
                    'from_id': type('PeerUser', (), {'user_id': update.user_id})(),
                    'peer_id': type('PeerUser', (), {'user_id': ALLOWED_USER_ID})()
                })()
                logger.info("   üì® –°—Ç–≤–æ—Ä–µ–Ω–æ –ø—Å–µ–≤–¥–æ-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ UpdateShortMessage")

        # –û–±—Ä–æ–±–ª—è—î–º–æ –∑–Ω–∞–π–¥–µ–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if message_to_process:
            message_counter += 1
            logger.info(f"üî• –û–ë–†–û–ë–õ–Ø–Ñ–ú–û –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø #{message_counter}")

            # –û—Ç—Ä–∏–º—É—î–º–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            msg_id = getattr(message_to_process, 'id', None)
            logger.info(f"üì® Message ID: {msg_id}")

            # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç
            message_text = getattr(message_to_process, 'message', None)
            logger.info(f"üìù Text: {message_text}")

            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞—Ç—É
            msg_date = getattr(message_to_process, 'date', None)
            logger.info(f"üìÖ Date: {msg_date}")

            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞
            from_user_id = None
            if hasattr(message_to_process, 'from_id') and message_to_process.from_id:
                if hasattr(message_to_process.from_id, 'user_id'):
                    from_user_id = message_to_process.from_id.user_id

            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —á–∞—Ç
            chat_id = None
            if hasattr(message_to_process, 'peer_id') and message_to_process.peer_id:
                if hasattr(message_to_process.peer_id, 'user_id'):
                    chat_id = message_to_process.peer_id.user_id
                elif hasattr(message_to_process.peer_id, 'chat_id'):
                    chat_id = -message_to_process.peer_id.chat_id
                elif hasattr(message_to_process.peer_id, 'channel_id'):
                    chat_id = -1000000000000 - message_to_process.peer_id.channel_id

            logger.info(f"üë§ From User ID: {from_user_id}")
            logger.info(f"üí¨ Chat ID: {chat_id}")
            logger.info(f"üéØ Allowed User ID: {ALLOWED_USER_ID}")

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫—â–æ —î —Ç–µ–∫—Å—Ç
            if message_text and msg_id:
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                user_info = None
                if users and from_user_id:
                    for user in users:
                        if user.id == from_user_id:
                            user_info = user
                            break

                # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –≤ users, —Å—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
                if not user_info and from_user_id:
                    user_info = type('User', (), {
                        'id': from_user_id,
                        'username': None,
                        'first_name': 'Unknown User'
                    })()

                if user_info or from_user_id == ALLOWED_USER_ID:
                    logger.info("üíæ –ú–ò–¢–¢–Ñ–í–û –ó–ë–ï–†–Ü–ì–ê–Ñ–ú–û –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!")

                    message_data = {
                        "message_id": msg_id,
                        "chat_id": chat_id or from_user_id,
                        "chat_type": "SAVED_MESSAGES" if chat_id == ALLOWED_USER_ID else "PRIVATE",
                        "chat_title": "–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è" if chat_id == ALLOWED_USER_ID else None,
                        "chat_username": getattr(user_info, 'username', None) if user_info else None,
                        "from_user_id": from_user_id or ALLOWED_USER_ID,
                        "from_username": getattr(user_info, 'username', None) if user_info else None,
                        "from_first_name": getattr(user_info, 'first_name', 'Unknown') if user_info else 'Me',
                        "text": message_text,
                        "date": datetime.fromtimestamp(msg_date).isoformat() if msg_date else datetime.now().isoformat(),
                        "is_outgoing": from_user_id == ALLOWED_USER_ID or getattr(message_to_process, 'out', False),
                        "is_edited": False
                    }
                    save_message(message_data)
                    logger.info(f"‚úÖ –ú–ò–¢–¢–Ñ–í–û –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {get_current_data_file()}")
                else:
                    logger.info("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
            else:
                logger.info(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ (–Ω–µ–º–∞—î —Ç–µ–∫—Å—Ç—É: {bool(message_text)} –∞–±–æ ID: {bool(msg_id)})")
        else:
            logger.info(f"‚ÑπÔ∏è –û–Ω–æ–≤–ª–µ–Ω–Ω—è {update_type} –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")

    except Exception as e:
        logger.error(f"üí• –ü–û–ú–ò–õ–ö–ê RAW UPDATE: {e}")
        import traceback
        logger.error(traceback.format_exc())

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ü—å–æ–≥–æ —á–∞—Ç—É
def should_save_message(message: Message) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""

    # –ó–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if message.chat.id == ALLOWED_USER_ID:
        return settings['save_saved_messages']

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø —á–∞—Ç—É
    chat_type = str(message.chat.type)

    # –ü—Ä–∏–≤–∞—Ç–Ω—ñ —á–∞—Ç–∏ (–Ω–µ —Å–µ–∫—Ä–µ—Ç–Ω—ñ)
    if 'PRIVATE' in chat_type.upper():
        return settings['save_private_chats']

    # –ì—Ä—É–ø–∏
    if 'GROUP' in chat_type.upper() or 'SUPERGROUP' in chat_type.upper():
        return settings['save_groups']

    # –ö–∞–Ω–∞–ª–∏
    if 'CHANNEL' in chat_type.upper():
        return settings['save_channels']

    return False

# –†–µ–∑–µ—Ä–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@client_app.on_message()
async def handle_regular_messages(_client: Client, message: Message):
    try:
        global message_counter
        message_counter += 1

        logger.info(f"üì± –ó–í–ò–ß–ê–ô–ù–ò–ô –û–ë–†–û–ë–ù–ò–ö! –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è #{message_counter}")
        logger.info(f"üì® ID: {message.id}")
        logger.info(f"üìù Text: {message.text}")
        logger.info(f"üí¨ Chat: {message.chat.id} ({message.chat.type})")
        logger.info(f"üë§ From: {message.from_user.id if message.from_user else 'None'}")
        logger.info(f"üì§ Outgoing: {getattr(message, 'outgoing', 'Unknown')}")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ü—å–æ–≥–æ —á–∞—Ç—É
        if not should_save_message(message):
            logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —á–∞—Ç {message.chat.id} ({message.chat.type}) - –≤–∏–º–∫–Ω–µ–Ω–æ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö")
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ (—É–Ω–∏–∫–∞—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤)
        data = load_messages()
        existing_ids = [msg['message_id'] for msg in data['messages']]

        if message.id in existing_ids:
            logger.info(f"‚ö†Ô∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message.id} –≤–∂–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
            return

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫—â–æ —î —Ç–µ–∫—Å—Ç
        if message.text:
            logger.info("üíæ –†–ï–ó–ï–†–í–ù–ï –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø!")

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —á–∞—Ç—É
            chat_type = "SAVED_MESSAGES" if message.chat.id == ALLOWED_USER_ID else str(message.chat.type)
            chat_title = "–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è" if message.chat.id == ALLOWED_USER_ID else getattr(message.chat, 'title', None)

            # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö —á–∞—Ç—ñ–≤ –¥–æ–¥–∞—î–º–æ —ñ–º'—è —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞
            if 'PRIVATE' in chat_type.upper() and message.chat.id != ALLOWED_USER_ID:
                if message.from_user and message.from_user.id != ALLOWED_USER_ID:
                    chat_title = f"{message.from_user.first_name}"
                    if message.from_user.last_name:
                        chat_title += f" {message.from_user.last_name}"
                elif hasattr(message.chat, 'first_name'):
                    chat_title = message.chat.first_name
                    if hasattr(message.chat, 'last_name') and message.chat.last_name:
                        chat_title += f" {message.chat.last_name}"

            message_data = {
                "message_id": message.id,
                "chat_id": message.chat.id,
                "chat_type": chat_type,
                "chat_title": chat_title,
                "chat_username": getattr(message.chat, 'username', None),
                "from_user_id": message.from_user.id if message.from_user else ALLOWED_USER_ID,
                "from_username": message.from_user.username if message.from_user else None,
                "from_first_name": message.from_user.first_name if message.from_user else "Me",
                "text": message.text,
                "date": message.date.isoformat(),
                "is_outgoing": (message.from_user.id == ALLOWED_USER_ID) if message.from_user else True,
                "is_edited": False
            }
            save_message(message_data)
            logger.info(f"‚úÖ –†–ï–ó–ï–†–í–ù–û –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {get_current_data_file()}")
        else:
            logger.info("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ (–Ω–µ–º–∞—î —Ç–µ–∫—Å—Ç—É)")

    except Exception as e:
        await error_monitor.log_error(e, "–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è Pyrogram")

# ============= TELEGRAM BOT (–¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è) =============

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot_app = Application.builder().token(BOT_TOKEN).build()

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async def start(update: Update, _context: ContextType) -> None:
    user_id = update.effective_user.id
    if not check_access(user_id):
        if update.message:
            await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return

    if update.message:
        await update.message.reply_text(
            "ü§ñ **–ì—ñ–±—Ä–∏–¥–Ω–∏–π –±–æ—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å**\n\n"
            "üì± **Client API** –∑–±–µ—Ä—ñ–≥–∞—î –≤—Å—ñ –≤–∞—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ\n"
            "ü§ñ **Bot API** –¥–æ–∑–≤–æ–ª—è—î –∫–µ—Ä—É–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å–æ–º\n"
            "üß† **AI –ü–æ–º—ñ—á–Ω–∏–∫** –∞–Ω–∞–ª—ñ–∑—É—î —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª—è—î –ø–æ–º–∏–ª–∫–∏\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º! üëá",
            reply_markup=get_main_keyboard(),
            parse_mode='Markdown'
        )

async def status(update: Update, _context: ContextType) -> None:
    user_id = update.effective_user.id
    if not check_access(user_id):
        if update.message:
            await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return

    data = load_messages()
    message_count = len(data["messages"])
    if update.message:
        await update.message.reply_text(f"üìä –°—Ç–∞—Ç—É—Å: –∑–±–µ—Ä–µ–∂–µ–Ω–æ {message_count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ ({CURRENT_DATE})")

async def backup_now(update: Update, _context: ContextType) -> None:
    user_id = update.effective_user.id
    if not check_access(user_id):
        if update.message:
            await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return

    if update.message:
        await update.message.reply_text("üîÑ –ü–æ—á–∞—Ç–æ–∫ –º–∏—Ç—Ç—î–≤–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è...")
        await upload_to_storage_box()
        await update.message.reply_text("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

async def clientstatus(update: Update, _context: ContextType) -> None:
    user_id = update.effective_user.id
    if not check_access(user_id):
        if update.message:
            await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return

    try:
        if client_app.is_connected:
            me = await client_app.get_me()
            status_text = f"‚úÖ Client API –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π\nüë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {me.first_name} (@{me.username})"
        else:
            status_text = "‚ùå Client API –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π"
    except Exception as check_error:
        status_text = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É Client API: {check_error}"

    if update.message:
        await update.message.reply_text(status_text)

async def view_history(update: Update, context: ContextType) -> None:
    user_id = update.effective_user.id
    if not check_access(user_id):
        if update.message:
            await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return

    await list_files(update, context, 0)

async def list_files(update: Update, context: ContextType, page: int = 0) -> None:
    user_id = update.effective_user.id

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ –∑ Storage Box
    storage_box = StorageBoxManager()
    if not storage_box.connect():
        if update.message:
            await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ Storage Box")
        return

    files = storage_box.list_files()
    storage_box.close()

    if not files:
        if update.message:
            await update.message.reply_text("üìÅ –§–∞–π–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª–∏ –≤ –∫–µ—à –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    files_cache[str(user_id)] = files

    # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ñ–∞–π–ª–∏ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
    await show_files_page(update, context, page, files)

async def show_files_page(update: Update, _context: ContextType, page: int, files: List[str]) -> None:
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é
    items_per_page = 10
    total_pages = (len(files) + items_per_page - 1) // items_per_page

    if page < 0:
        page = 0
    if page >= total_pages:
        page = total_pages - 1

    start_idx = page * items_per_page
    end_idx = min(start_idx + items_per_page, len(files))

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ —Ñ–∞–π–ª–∞–º–∏
    keyboard = []
    for i in range(start_idx, end_idx):
        file_date = files[i].replace('saved_messages_', '').replace('.json', '')
        keyboard.append([InlineKeyboardButton(f"üìÖ {file_date}", callback_data=f"view_{files[i]}")])

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è", callback_data=f"page_{page-1}"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton("–ù–∞—Å—Ç—É–ø–Ω–∞ ‚û°Ô∏è", callback_data=f"page_{page+1}"))

    if nav_buttons:
        keyboard.append(nav_buttons)

    reply_markup = InlineKeyboardMarkup(keyboard)

    text = f"üìÅ **–§–∞–π–ª–∏ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏** (—Å—Ç–æ—Ä—ñ–Ω–∫–∞ {page+1} –∑ {total_pages}):\n\nüìä –í—Å—å–æ–≥–æ —Ñ–∞–π–ª—ñ–≤: {len(files)}"

    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    elif update.message:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def refresh_settings_message(update: Update, _context: ContextType) -> None:
    """–û–Ω–æ–≤–ª—é—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏"""
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    data = load_messages()
    stats = {
        'SAVED_MESSAGES': 0,
        'PRIVATE': 0,
        'GROUP': 0,
        'SUPERGROUP': 0,
        'CHANNEL': 0,
        'OTHER': 0
    }

    for msg in data['messages']:
        chat_type = msg.get('chat_type', 'UNKNOWN')
        if 'SAVED' in chat_type or msg.get('chat_id') == ALLOWED_USER_ID:
            stats['SAVED_MESSAGES'] += 1
        elif 'PRIVATE' in chat_type:
            stats['PRIVATE'] += 1
        elif 'SUPERGROUP' in chat_type:
            stats['SUPERGROUP'] += 1
        elif 'GROUP' in chat_type:
            stats['GROUP'] += 1
        elif 'CHANNEL' in chat_type:
            stats['CHANNEL'] += 1
        else:
            stats['OTHER'] += 1

    settings_text = (
        "‚öôÔ∏è **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:**\n\n"
        f"üì± –ó–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {'‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' if settings['save_saved_messages'] else '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}\n"
        f"üí¨ –ü—Ä–∏–≤–∞—Ç–Ω—ñ —á–∞—Ç–∏: {'‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' if settings['save_private_chats'] else '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}\n"
        f"üë• –ì—Ä—É–ø–∏: {'‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' if settings['save_groups'] else '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}\n"
        f"üì¢ –ö–∞–Ω–∞–ª–∏: {'‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' if settings['save_channels'] else '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}\n\n"
        "‚öôÔ∏è **–¢–µ—Ö–Ω—ñ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:**\n"
        f"‚è±Ô∏è –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ó–±–µ—Ä–µ–∂–µ–Ω–∏—Ö: {settings['check_interval']} —Å–µ–∫\n"
        f"‚è±Ô∏è –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥—ñ–∞–ª–æ–≥—ñ–≤: {settings['dialogs_check_interval']} —Å–µ–∫\n"
        f"üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥—ñ–∞–ª–æ–≥—ñ–≤: {settings['dialogs_limit']}\n"
        f"üìù –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –¥—ñ–∞–ª–æ–≥—É: {settings['messages_per_dialog']}\n\n"
        "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:**\n"
        f"üì± –ó–±–µ—Ä–µ–∂–µ–Ω—ñ: {stats['SAVED_MESSAGES']}\n"
        f"üí¨ –ü—Ä–∏–≤–∞—Ç–Ω—ñ: {stats['PRIVATE']}\n"
        f"üë• –ì—Ä—É–ø–∏: {stats['GROUP'] + stats['SUPERGROUP']}\n"
        f"üì¢ –ö–∞–Ω–∞–ª–∏: {stats['CHANNEL']}\n"
        f"‚ùì –Ü–Ω—à—ñ: {stats['OTHER']}\n\n"
        "üí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ –¥–ª—è –∑–º—ñ–Ω–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"
    )

    keyboard = [
        [
            InlineKeyboardButton(
                f"üì± –ó–±–µ—Ä–µ–∂–µ–Ω—ñ: {'‚úÖ' if settings['save_saved_messages'] else '‚ùå'}",
                callback_data='toggle_saved'
            ),
            InlineKeyboardButton(
                f"üí¨ –ü—Ä–∏–≤–∞—Ç–Ω—ñ: {'‚úÖ' if settings['save_private_chats'] else '‚ùå'}",
                callback_data='toggle_private'
            )
        ],
        [
            InlineKeyboardButton(
                f"üë• –ì—Ä—É–ø–∏: {'‚úÖ' if settings['save_groups'] else '‚ùå'}",
                callback_data='toggle_groups'
            ),
            InlineKeyboardButton(
                f"üì¢ –ö–∞–Ω–∞–ª–∏: {'‚úÖ' if settings['save_channels'] else '‚ùå'}",
                callback_data='toggle_channels'
            )
        ],
        [
            InlineKeyboardButton("‚öôÔ∏è –¢–µ—Ö–Ω—ñ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data='tech_settings')
        ],
        [
            InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data='refresh_settings')
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(settings_text, parse_mode='Markdown', reply_markup=reply_markup)
    elif update.message:
        await update.message.reply_text(settings_text, parse_mode='Markdown', reply_markup=reply_markup)

async def show_tech_settings(update: Update, _context: ContextType) -> None:
    """–ü–æ–∫–∞–∑—É—î —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup

    text = (
        "‚öôÔ∏è **–¢–µ—Ö–Ω—ñ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:**\n\n"
        f"‚è±Ô∏è **–Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ó–±–µ—Ä–µ–∂–µ–Ω–∏—Ö:** {settings['check_interval']} —Å–µ–∫\n"
        "–Ø–∫ —á–∞—Å—Ç–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ \"–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\"\n\n"
        f"‚è±Ô∏è **–Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥—ñ–∞–ª–æ–≥—ñ–≤:** {settings['dialogs_check_interval']} —Å–µ–∫\n"
        "–Ø–∫ —á–∞—Å—Ç–æ —Å–∫–∞–Ω—É–≤–∞—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ñ —á–∞—Ç–∏/–≥—Ä—É–ø–∏/–∫–∞–Ω–∞–ª–∏\n\n"
        f"üìä **–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥—ñ–∞–ª–æ–≥—ñ–≤:** {settings['dialogs_limit']}\n"
        "–°–∫—ñ–ª—å–∫–∏ –¥—ñ–∞–ª–æ–≥—ñ–≤ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –∑–∞ —Ä–∞–∑\n\n"
        f"üìù **–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –¥—ñ–∞–ª–æ–≥—É:** {settings['messages_per_dialog']}\n"
        "–°–∫—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –±—Ä–∞—Ç–∏ –∑ –∫–æ–∂–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É\n\n"
        "üí° –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è"
    )

    keyboard = [
        [InlineKeyboardButton("‚è±Ô∏è –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ó–±–µ—Ä–µ–∂–µ–Ω–∏—Ö", callback_data='dummy')],
        [
            InlineKeyboardButton("0.3 —Å–µ–∫", callback_data='set_check_interval_0.3'),
            InlineKeyboardButton("0.5 —Å–µ–∫", callback_data='set_check_interval_0.5'),
            InlineKeyboardButton("1 —Å–µ–∫", callback_data='set_check_interval_1'),
            InlineKeyboardButton("2 —Å–µ–∫", callback_data='set_check_interval_2')
        ],
        [InlineKeyboardButton("‚è±Ô∏è –Ü–Ω—Ç–µ—Ä–≤–∞–ª –¥—ñ–∞–ª–æ–≥—ñ–≤", callback_data='dummy')],
        [
            InlineKeyboardButton("3 —Å–µ–∫", callback_data='set_dialogs_interval_3'),
            InlineKeyboardButton("5 —Å–µ–∫", callback_data='set_dialogs_interval_5'),
            InlineKeyboardButton("10 —Å–µ–∫", callback_data='set_dialogs_interval_10'),
            InlineKeyboardButton("30 —Å–µ–∫", callback_data='set_dialogs_interval_30')
        ],
        [InlineKeyboardButton("üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥—ñ–∞–ª–æ–≥—ñ–≤", callback_data='dummy')],
        [
            InlineKeyboardButton("10", callback_data='set_dialogs_limit_10'),
            InlineKeyboardButton("20", callback_data='set_dialogs_limit_20'),
            InlineKeyboardButton("50", callback_data='set_dialogs_limit_50'),
            InlineKeyboardButton("100", callback_data='set_dialogs_limit_100')
        ],
        [InlineKeyboardButton("üìù –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –¥—ñ–∞–ª–æ–≥—É", callback_data='dummy')],
        [
            InlineKeyboardButton("3", callback_data='set_messages_per_dialog_3'),
            InlineKeyboardButton("5", callback_data='set_messages_per_dialog_5'),
            InlineKeyboardButton("10", callback_data='set_messages_per_dialog_10'),
            InlineKeyboardButton("20", callback_data='set_messages_per_dialog_20')
        ],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_settings')]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(text, parse_mode='Markdown', reply_markup=reply_markup)
    elif update.message:
        await update.message.reply_text(text, parse_mode='Markdown', reply_markup=reply_markup)

async def handle_callback_query(update: Update, context: ContextType) -> None:
    user_id = update.effective_user.id
    if not check_access(user_id):
        await update.callback_query.answer("‚ùå –í–∏–±–∞—á—Ç–µ, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.", show_alert=True)
        return

    query = update.callback_query
    data = query.data

    # –Ü–≥–Ω–æ—Ä—É—î–º–æ dummy –∫–Ω–æ–ø–∫–∏ (–∑–∞–≥–æ–ª–æ–≤–∫–∏)
    if data == 'dummy':
        await query.answer()
        return

    # –û–±—Ä–æ–±–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    if data == 'toggle_saved':
        settings['save_saved_messages'] = not settings['save_saved_messages']
        await query.answer(f"üì± –ó–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {'‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' if settings['save_saved_messages'] else '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}")
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await refresh_settings_message(update, context)

    elif data == 'toggle_private':
        settings['save_private_chats'] = not settings['save_private_chats']
        await query.answer(f"üí¨ –ü—Ä–∏–≤–∞—Ç–Ω—ñ —á–∞—Ç–∏: {'‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' if settings['save_private_chats'] else '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}")
        await refresh_settings_message(update, context)

    elif data == 'toggle_groups':
        settings['save_groups'] = not settings['save_groups']
        await query.answer(f"üë• –ì—Ä—É–ø–∏: {'‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' if settings['save_groups'] else '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}")
        await refresh_settings_message(update, context)

    elif data == 'toggle_channels':
        settings['save_channels'] = not settings['save_channels']
        await query.answer(f"üì¢ –ö–∞–Ω–∞–ª–∏: {'‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' if settings['save_channels'] else '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}")
        await refresh_settings_message(update, context)

    elif data == 'tech_settings':
        await query.answer()
        await show_tech_settings(update, context)

    elif data == 'refresh_settings':
        await query.answer("üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ")
        await refresh_settings_message(update, context)

    elif data.startswith('set_check_interval_'):
        value = float(data.split('_')[-1])
        settings['check_interval'] = value
        await query.answer(f"‚è±Ô∏è –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {value} —Å–µ–∫")
        await show_tech_settings(update, context)

    elif data.startswith('set_dialogs_interval_'):
        value = int(data.split('_')[-1])
        settings['dialogs_check_interval'] = value
        await query.answer(f"‚è±Ô∏è –Ü–Ω—Ç–µ—Ä–≤–∞–ª –¥—ñ–∞–ª–æ–≥—ñ–≤: {value} —Å–µ–∫")
        await show_tech_settings(update, context)

    elif data.startswith('set_dialogs_limit_'):
        value = int(data.split('_')[-1])
        settings['dialogs_limit'] = value
        await query.answer(f"üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥—ñ–∞–ª–æ–≥—ñ–≤: {value}")
        await show_tech_settings(update, context)

    elif data.startswith('set_messages_per_dialog_'):
        value = int(data.split('_')[-1])
        settings['messages_per_dialog'] = value
        await query.answer(f"üìù –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –¥—ñ–∞–ª–æ–≥—É: {value}")
        await show_tech_settings(update, context)

    elif data == 'back_to_settings':
        await query.answer()
        await refresh_settings_message(update, context)

    elif data == 'back_to_files':
        await query.answer()
        # –û—á–∏—â–∞—î–º–æ –∫–µ—à –ø–µ—Ä–µ–≥–ª—è–¥—É —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_id_str = str(user_id)
        keys_to_remove = [k for k in user_viewing_state.keys() if str(k).startswith(f"{user_id_str}_")]
        for key in keys_to_remove:
            del user_viewing_state[key]
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ —Å–ø–∏—Å–∫—É —Ñ–∞–π–ª—ñ–≤
        if user_id_str in files_cache:
            await show_files_page(update, context, 0, files_cache[user_id_str])
        else:
            await query.edit_message_text("üìÅ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ –∑–∞—Å—Ç–∞—Ä—ñ–≤. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üìÇ –Ü—Å—Ç–æ—Ä—ñ—è' –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.")

    elif data.startswith("page_"):
        page = int(data.split("_")[1])
        user_id_str = str(user_id)
        if user_id_str in files_cache:
            await query.answer()
            await show_files_page(update, context, page, files_cache[user_id_str])
        else:
            await query.answer("üìÅ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ –∑–∞—Å—Ç–∞—Ä—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø—Ä–æ—Å—ñ—Ç—å –π–æ–≥–æ –∑–Ω–æ–≤—É.", show_alert=True)

    elif data.startswith("view_"):
        filename = data.split("_", 1)[1]
        await query.answer()
        await view_file(update, context, filename, page=0)

    elif data.startswith("msgpage_"):
        # –§–æ—Ä–º–∞—Ç: msgpage_filename_page
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—î –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è - —Ü–µ –Ω–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        last_underscore = data.rfind("_")
        if last_underscore > 8:  # –ø—ñ—Å–ª—è "msgpage_"
            filename = data[8:last_underscore]  # –≤—Å–µ –º—ñ–∂ "msgpage_" —ñ –æ—Å—Ç–∞–Ω–Ω—ñ–º "_"
            msg_page = int(data[last_underscore + 1:])  # –≤—Å–µ –ø—ñ—Å–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ "_"
            await query.answer()
            await view_file(update, context, filename, msg_page)

    elif data.startswith("download_"):
        filename = data.split("_", 1)[1]
        await query.answer("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Ñ–∞–π–ª...")
        await download_file_to_user(update, context, filename)

async def view_file(update: Update, _context: ContextType, filename: str, page: int = 0) -> None:
    """–ü–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª—É –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é"""
    user_id = update.effective_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ñ–∞–π–ª –≤–∂–µ –≤ –∫–µ—à—ñ
    cache_key = f"{user_id}_{filename}"
    if cache_key not in user_viewing_state:
        # –°–∫–∞—á—É—î–º–æ —Ñ–∞–π–ª –∑ Storage Box
        storage_box = StorageBoxManager()
        if not storage_box.connect():
            if update.callback_query and update.callback_query.message and isinstance(update.callback_query.message, TelegramMessage):
                await update.callback_query.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ Storage Box")
            return

        local_path = storage_box.download_file(filename)
        storage_box.close()

        if not local_path:
            if update.callback_query and update.callback_query.message and isinstance(update.callback_query.message, TelegramMessage):
                await update.callback_query.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª.")
            return

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∑ —Ñ–∞–π–ª—É
        with open(local_path, 'r', encoding='utf-8') as f:
            file_data = json.load(f)

        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
        if os.path.exists(local_path):
            os.remove(local_path)

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
        user_viewing_state[cache_key] = {
            'filename': filename,
            'messages': file_data.get('messages', [])
        }

    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ –∫–µ—à—É
    messages = user_viewing_state[cache_key]['messages']

    if not messages:
        text = "üìÅ –§–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π."
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É", callback_data="back_to_files")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        return

    # –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è
    messages_per_page = 5
    total_pages = (len(messages) + messages_per_page - 1) // messages_per_page

    if page < 0:
        page = 0
    if page >= total_pages:
        page = total_pages - 1

    start_idx = page * messages_per_page
    end_idx = min(start_idx + messages_per_page, len(messages))

    # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç–µ–∫—Å—Ç
    file_date = filename.replace('saved_messages_', '').replace('.json', '')
    text = f"üìÅ **–§–∞–π–ª:** {file_date}\n"
    text += f"üìä **–í—Å—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:** {len(messages)}\n"
    text += f"üìÑ **–°—Ç–æ—Ä—ñ–Ω–∫–∞:** {page + 1} –∑ {total_pages}\n\n"

    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
    for i in range(start_idx, end_idx):
        msg = messages[i]
        date = datetime.fromisoformat(msg['date']).strftime("%d.%m %H:%M")
        direction = "‚û°Ô∏è" if msg.get('is_outgoing', False) else "‚¨ÖÔ∏è"
        sender = msg.get('from_first_name', '–ù–µ–≤—ñ–¥–æ–º–æ')
        chat_title = msg.get('chat_title', '–ù–µ–≤—ñ–¥–æ–º–æ')
        text_preview = (msg.get('text', '') or '')[:100]
        if len(msg.get('text', '')) > 100:
            text_preview += "..."

        text += f"**{i + 1}.** {direction} {date}\n"
        text += f"üë§ **{sender}** ‚Üí üí¨ **{chat_title}**\n"
        text += f"üìù {text_preview}\n\n"

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    keyboard = []

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è", callback_data=f"msgpage_{filename}_{page-1}"))
    nav_buttons.append(InlineKeyboardButton(f"üìÑ {page + 1}/{total_pages}", callback_data="dummy"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton("–ù–∞—Å—Ç—É–ø–Ω–∞ ‚û°Ô∏è", callback_data=f"msgpage_{filename}_{page+1}"))
    keyboard.append(nav_buttons)

    # –ö–Ω–æ–ø–∫–∏ —à–≤–∏–¥–∫–æ—ó –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    quick_nav = []
    if page > 0:
        quick_nav.append(InlineKeyboardButton("‚èÆÔ∏è –ü–µ—Ä—à–∞", callback_data=f"msgpage_{filename}_0"))
    if page < total_pages - 1:
        quick_nav.append(InlineKeyboardButton("–û—Å—Ç–∞–Ω–Ω—è ‚è≠Ô∏è", callback_data=f"msgpage_{filename}_{total_pages-1}"))
    if quick_nav:
        keyboard.append(quick_nav)

    # –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
    action_buttons = [
        InlineKeyboardButton("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª", callback_data=f"download_{filename}"),
        InlineKeyboardButton("üîô –î–æ —Å–ø–∏—Å–∫—É", callback_data="back_to_files")
    ]
    keyboard.append(action_buttons)

    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def download_file_to_user(update: Update, _context: ContextType, filename: str) -> None:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ñ–∞–π–ª –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
    # –°–∫–∞—á—É—î–º–æ —Ñ–∞–π–ª –∑ Storage Box
    storage_box = StorageBoxManager()
    if not storage_box.connect():
        if update.callback_query and update.callback_query.message and isinstance(update.callback_query.message, TelegramMessage):
            await update.callback_query.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ Storage Box")
        return

    local_path = storage_box.download_file(filename)
    storage_box.close()

    if not local_path:
        if update.callback_query and update.callback_query.message and isinstance(update.callback_query.message, TelegramMessage):
            await update.callback_query.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª.")
        return

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–∞–π–ª –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    try:
        if update.callback_query and update.callback_query.message and isinstance(update.callback_query.message, TelegramMessage):
            with open(local_path, 'rb') as f:
                await update.callback_query.message.reply_document(
                    document=f,
                    filename=filename,
                    caption=f"üìÅ {filename}"
                )
    except Exception as exc:
        if update.callback_query and update.callback_query.message and isinstance(update.callback_query.message, TelegramMessage):
            await update.callback_query.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª—É: {exc}")
    finally:
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
        if os.path.exists(local_path):
            os.remove(local_path)

async def myuuid(update: Update, _context: ContextType) -> None:
    user_id = update.effective_user.id
    user_uuid = str(uuid.uuid5(uuid.NAMESPACE_OID, str(user_id)))
    if update.message:
        await update.message.reply_text(
            f"‚ÑπÔ∏è **–í–∞—à–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:**\n"
            f"üÜî Telegram ID: `{user_id}`\n"
            f"üîë UUID: `{user_uuid}`\n\n"
            f"üîê –î–æ–∑–≤–æ–ª–µ–Ω–∏–π UUID: `{ALLOWED_UUID}`\n\n"
            f"üìù –ù–∞–¥–∞–π—Ç–µ –≤–∞—à UUID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É.",
            parse_mode='Markdown'
        )

async def debug_settings(update: Update, _context: ContextType) -> None:
    user_id = update.effective_user.id
    if not check_access(user_id):
        if update.message:
            await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return

    debug_info = f"""üîß **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏:**

üì± **Client API:**
- API_ID: `{API_ID}`
- API_HASH: `{'*' * len(str(API_HASH)) if API_HASH != 'YOUR_API_HASH' else '–ù–ï –ù–ê–õ–ê–®–¢–û–í–ê–ù–û'}`
- –î–æ–∑–≤–æ–ª–µ–Ω–∏–π User ID: `{ALLOWED_USER_ID}`

ü§ñ **Bot API:**
- –î–æ–∑–≤–æ–ª–µ–Ω–∏–π UUID: `{ALLOWED_UUID}`
- –í–∞—à UUID: `{str(uuid.uuid5(uuid.NAMESPACE_OID, str(user_id)))}`

üìÅ **–§–∞–π–ª–∏:**
- –ü–æ—Ç–æ—á–Ω–∏–π —Ñ–∞–π–ª: `{get_current_data_file()}`
- –Ü—Å–Ω—É—î: `{os.path.exists(get_current_data_file())}`

‚ö†Ô∏è **–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:**
1. API_ID —Ç–∞ API_HASH –º–∞—é—Ç—å –±—É—Ç–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ
2. ALLOWED_USER_ID –º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –≤–∞—à–æ–º—É Telegram ID
3. Client API –º–∞—î –±—É—Ç–∏ –∑–∞–ø—É—â–µ–Ω–∏–π"""

    await update.message.reply_text(debug_info, parse_mode='Markdown')

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–æ–≤–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def fetch_recent_messages():
    try:
        from datetime import datetime, timedelta

        logger.info("üîç –ü—Ä–∏–Ω—É–¥–æ–≤–æ –æ—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ...")

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—á–∞—Ç–æ–∫ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—å–æ–≥–æ –¥–Ω—è (00:00:00)
        today_start = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –£–°–Ü–• –ª–æ–∫–∞–ª—å–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
        existing_ids = set()

        # –®—É–∫–∞—î–º–æ –≤—Å—ñ —Ñ–∞–π–ª–∏ saved_messages_*.json
        for filename in os.listdir('.'):
            if filename.startswith('saved_messages_') and filename.endswith('.json'):
                try:
                    with open(filename, 'r', encoding='utf-8') as f:
                        file_data = json.load(f)
                        for msg in file_data.get('messages', []):
                            existing_ids.add(msg['message_id'])
                    logger.debug(f"üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ID –∑ {filename}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ {filename}: {e}")

        logger.info(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(existing_ids)} –≤–∂–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –≤—Å—ñ—Ö —Ñ–∞–π–ª–∞—Ö")

        new_messages_count = 0
        checked_messages_count = 0

        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ "–ó–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å" –±–µ–∑ –ª—ñ–º—ñ—Ç—É
        logger.info(f"üìÖ –®—É–∫–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ {today_start.strftime('%Y-%m-%d %H:%M:%S')}...")

        async for message in client_app.get_chat_history("me"):
            checked_messages_count += 1

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–∞—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if message.date < today_start:
                logger.info(f"‚èπÔ∏è –î–æ—Å—è–≥–Ω—É—Ç–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–æ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—å–æ–≥–æ –¥–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ: {checked_messages_count}, –Ω–æ–≤–∏—Ö: {new_messages_count}")
                break

            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ —Ç–µ–∫—Å—Ç—É
            if not message.text:
                continue

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —â–µ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ
            if message.id not in existing_ids:
                logger.info(f"üíæ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message.id} - {message.text[:50]}...")

                message_data = {
                    "message_id": message.id,
                    "chat_id": message.chat.id,
                    "chat_type": "SAVED_MESSAGES",
                    "chat_title": "–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
                    "chat_username": None,
                    "from_user_id": message.from_user.id if message.from_user else ALLOWED_USER_ID,
                    "from_username": message.from_user.username if message.from_user else None,
                    "from_first_name": message.from_user.first_name if message.from_user else "Me",
                    "text": message.text,
                    "date": message.date.isoformat(),
                    "is_outgoing": (message.from_user.id == ALLOWED_USER_ID) if message.from_user else True,
                    "is_edited": False
                }

                save_message(message_data)
                existing_ids.add(message.id)
                new_messages_count += 1

        logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ó–±–µ—Ä–µ–∂–µ–Ω–∏—Ö. –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ: {checked_messages_count}, –∑–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–æ–≤–∏—Ö: {new_messages_count}")

        # –¢–µ–ø–µ—Ä —Å–∫–∞–Ω—É—î–º–æ –ø—Ä–∏–≤–∞—Ç–Ω—ñ —á–∞—Ç–∏, —è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ
        if settings['save_private_chats']:
            logger.info("üîç –°–∫–∞–Ω—É—é –ø—Ä–∏–≤–∞—Ç–Ω—ñ —á–∞—Ç–∏ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ...")

            total_chats_scanned = 0
            total_new_messages = 0

            async for dialog in client_app.get_dialogs(limit=settings['dialogs_limit']):
                chat = dialog.chat

                # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ "–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
                if chat.id == ALLOWED_USER_ID:
                    continue

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ñ —á–∞—Ç–∏
                chat_type_str = str(chat.type).upper()
                if 'PRIVATE' not in chat_type_str:
                    continue

                total_chats_scanned += 1
                chat_new_messages = 0
                chat_checked_messages = 0
                chat_title = "–ù–µ–≤—ñ–¥–æ–º–æ"  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

                try:
                    # –°–∫–∞–Ω—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ü—å–æ–≥–æ —á–∞—Ç—É –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
                    async for message in client_app.get_chat_history(chat.id):
                        chat_checked_messages += 1

                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–∞—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                        if message.date < today_start:
                            break

                        # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ —Ç–µ–∫—Å—Ç—É
                        if not message.text:
                            continue

                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤–∂–µ
                        if message.id in existing_ids:
                            continue

                        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞–∑–≤—É —á–∞—Ç—É
                        chat_title = getattr(chat, 'title', None)
                        if 'PRIVATE' in chat_type_str:
                            if hasattr(chat, 'first_name'):
                                chat_title = chat.first_name
                                if hasattr(chat, 'last_name') and chat.last_name:
                                    chat_title += f" {chat.last_name}"

                        logger.info(f"üíæ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑ {chat_title}: {message.id} - {message.text[:50]}...")

                        message_data = {
                            "message_id": message.id,
                            "chat_id": chat.id,
                            "chat_type": chat_type_str,
                            "chat_title": chat_title,
                            "chat_username": getattr(chat, 'username', None),
                            "from_user_id": message.from_user.id if message.from_user else None,
                            "from_username": message.from_user.username if message.from_user else None,
                            "from_first_name": message.from_user.first_name if message.from_user else None,
                            "text": message.text,
                            "date": message.date.isoformat(),
                            "is_outgoing": (message.from_user.id == ALLOWED_USER_ID) if message.from_user else False,
                            "is_edited": False
                        }

                        save_message(message_data)
                        existing_ids.add(message.id)
                        chat_new_messages += 1
                        total_new_messages += 1

                    if chat_new_messages > 0:
                        logger.info(f"‚úÖ {chat_title}: –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ {chat_checked_messages}, –∑–±–µ—Ä–µ–∂–µ–Ω–æ {chat_new_messages}")

                except Exception as scan_exc:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—ñ —á–∞—Ç—É {chat.id}: {scan_exc}")

            logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö —á–∞—Ç—ñ–≤. –ß–∞—Ç—ñ–≤: {total_chats_scanned}, –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {total_new_messages}")

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {e}")

async def test_client(update: Update, _context: ContextType) -> None:
    user_id = update.effective_user.id
    if not check_access(user_id):
        if update.message:
            await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return

    try:
        global message_counter
        old_counter = message_counter

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Client API
        me = await client_app.get_me()

        if update.message:
            await update.message.reply_text("üß™ –ù–∞–¥—Å–∏–ª–∞—é —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å–æ–±—ñ
        test_msg = await client_app.send_message("me", f"üß™ –¢–µ—Å—Ç #{message_counter + 1} –≤—ñ–¥ Client API")

        # –ß–µ–∫–∞—î–º–æ —Ç—Ä–æ—Ö–∏
        await asyncio.sleep(2)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–±—ñ–ª—å—à–∏–≤—Å—è –ª—ñ—á—ñ–ª—å–Ω–∏–∫ (—á–µ—Ä–µ–∑ –æ–±—Ä–æ–±–Ω–∏–∫–∏)
        new_counter = message_counter

        # –ü—Ä–∏–Ω—É–¥–æ–≤–æ –æ—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if update.message:
            await update.message.reply_text("üîç –ü—Ä–∏–Ω—É–¥–æ–≤–æ –æ—Ç—Ä–∏–º—É—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
        old_messages_count = len(load_messages()['messages'])

        await fetch_recent_messages()

        new_messages_count = len(load_messages()['messages'])

        if update.message:
            await update.message.reply_text(
                f"‚úÖ **–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç—É:**\n\n"
                f"üë§ –ü—ñ–¥–∫–ª—é—á–µ–Ω–∏–π —è–∫: {me.first_name} (@{me.username})\n"
                f"üì§ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ID: {test_msg.id}\n\n"
                f"**–û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:**\n"
                f"üî¢ –õ—ñ—á—ñ–ª—å–Ω–∏–∫ –¥–æ: {old_counter}\n"
                f"üî¢ –õ—ñ—á—ñ–ª—å–Ω–∏–∫ –ø—ñ—Å–ª—è: {new_counter}\n"
                f"üìä –†—ñ–∑–Ω–∏—Ü—è: {new_counter - old_counter}\n"
                f"{'‚úÖ –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø—Ä–∞—Ü—é—é—Ç—å!' if new_counter > old_counter else '‚ùå –û–±—Ä–æ–±–Ω–∏–∫–∏ –ù–ï –ø—Ä–∞—Ü—é—é—Ç—å!'}\n\n"
                f"**–ü—Ä–∏–Ω—É–¥–æ–≤–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è:**\n"
                f"üìÅ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–æ: {old_messages_count}\n"
                f"üìÅ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—ñ—Å–ª—è: {new_messages_count}\n"
                f"üìä –î–æ–¥–∞–Ω–æ: {new_messages_count - old_messages_count}\n"
                f"{'‚úÖ –ü—Ä–∏–Ω—É–¥–æ–≤–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î!' if new_messages_count > old_messages_count else '‚ùå –ü—Ä–∏–Ω—É–¥–æ–≤–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ù–ï –ø—Ä–∞—Ü—é—î!'}",
                parse_mode='Markdown'
            )

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–∞–π–ª
        data = load_messages()
        current_file = get_current_data_file()
        if update.message:
            await update.message.reply_text(
                f"üìÅ **–°—Ç–∞–Ω —Ñ–∞–π–ª—É:**\n"
            f"üìÑ –§–∞–π–ª: `{current_file}`\n"
            f"üìä –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É —Ñ–∞–π–ª—ñ: {len(data['messages'])}\n"
            f"üíæ –§–∞–π–ª —ñ—Å–Ω—É—î: {os.path.exists(current_file)}",
            parse_mode='Markdown'
        )

    except Exception as test_exc:
        if update.message:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É Client API: {test_exc}")
        import traceback
        logger.error(traceback.format_exc())

async def scan_messages(update: Update, _context: ContextType) -> None:
    user_id = update.effective_user.id
    if not check_access(user_id):
        if update.message:
            await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return

    try:
        from datetime import datetime

        today_str = datetime.now().strftime('%Y-%m-%d')

        await update.message.reply_text(
            f"üîç **–°–∫–∞–Ω—É—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞ {today_str}...**\n\n"
            f"üì± –ó–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
            f"üí¨ –ü—Ä–∏–≤–∞—Ç–Ω—ñ —á–∞—Ç–∏ (—è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ)\n\n"
            f"‚è≥ –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å..."
        )

        old_count = len(load_messages()['messages'])
        await fetch_recent_messages()
        new_count = len(load_messages()['messages'])

        await update.message.reply_text(
            f"‚úÖ **–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
            f"üìÖ –î–∞—Ç–∞: {today_str}\n"
            f"üìä –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–æ: {old_count}\n"
            f"üìä –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—ñ—Å–ª—è: {new_count}\n"
            f"üìà –î–æ–¥–∞–Ω–æ: {new_count - old_count}",
            parse_mode='Markdown'
        )

    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: {e}")

async def auto_scan_status(update: Update, _context: ContextType) -> None:
    user_id = update.effective_user.id
    if not check_access(user_id):
        if update.message:
            await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return

    global message_counter
    last_id = get_last_message_id()
    data = load_messages()

    if update.message:
        await update.message.reply_text(
            "‚ö° **–®–≤–∏–¥–∫–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:**\n\n"
            "üî• **–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 0.5 —Å–µ–∫—É–Ω–¥–∏** - –º–∞–π–∂–µ –º–∏—Ç—Ç—î–≤–æ!\n"
            "üì± –°–∏—Å—Ç–µ–º–∞ –ø–æ—Å—Ç—ñ–π–Ω–æ —Å–∫–∞–Ω—É—î '–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'\n"
            "üíæ –ù–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –∑–∞ 0.5 —Å–µ–∫—É–Ω–¥–∏\n\n"
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            f"üî¢ –û–±—Ä–æ–±–ª–µ–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω—å: {message_counter}\n"
            f"üÜî –û—Å—Ç–∞–Ω–Ω—ñ–π ID: {last_id}\n"
            f"üìÅ –ü–æ—Ç–æ—á–Ω–∏–π —Ñ–∞–π–ª: `{get_current_data_file()}`\n"
            f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {len(data['messages'])}\n\n"
            "**–ö–æ–º–∞–Ω–¥–∏:**\n"
            "/scan - –†—É—á–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è (—Ä–µ–∑–µ—Ä–≤–Ω–∏–π –º–µ—Ç–æ–¥)\n"
            "/status - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
            "/test - –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–∏",
            parse_mode='Markdown'
        )

async def settings_command(update: Update, _context: ContextType) -> None:
    user_id = update.effective_user.id
    if not check_access(user_id):
        if update.message:
            await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return

    # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ —Ç–∏–ø–∞—Ö
    data = load_messages()
    messages = data.get('messages', [])

    stats = {
        'SAVED_MESSAGES': 0,
        'PRIVATE': 0,
        'GROUP': 0,
        'SUPERGROUP': 0,
        'CHANNEL': 0,
        'OTHER': 0
    }

    for msg in messages:
        chat_type = msg.get('chat_type', 'OTHER').upper()
        if 'SAVED' in chat_type:
            stats['SAVED_MESSAGES'] += 1
        elif 'PRIVATE' in chat_type:
            stats['PRIVATE'] += 1
        elif 'SUPERGROUP' in chat_type:
            stats['SUPERGROUP'] += 1
        elif 'GROUP' in chat_type:
            stats['GROUP'] += 1
        elif 'CHANNEL' in chat_type:
            stats['CHANNEL'] += 1
        else:
            stats['OTHER'] += 1

    settings_text = (
        "‚öôÔ∏è **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:**\n\n"
        f"üì± –ó–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {'‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' if settings['save_saved_messages'] else '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}\n"
        f"üí¨ –ü—Ä–∏–≤–∞—Ç–Ω—ñ —á–∞—Ç–∏: {'‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' if settings['save_private_chats'] else '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}\n"
        f"üë• –ì—Ä—É–ø–∏: {'‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' if settings['save_groups'] else '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}\n"
        f"üì¢ –ö–∞–Ω–∞–ª–∏: {'‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' if settings['save_channels'] else '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}\n\n"
        "‚öôÔ∏è **–¢–µ—Ö–Ω—ñ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:**\n"
        f"‚è±Ô∏è –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ó–±–µ—Ä–µ–∂–µ–Ω–∏—Ö: {settings['check_interval']} —Å–µ–∫\n"
        f"‚è±Ô∏è –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥—ñ–∞–ª–æ–≥—ñ–≤: {settings['dialogs_check_interval']} —Å–µ–∫\n"
        f"üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥—ñ–∞–ª–æ–≥—ñ–≤: {settings['dialogs_limit']}\n"
        f"üìù –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –¥—ñ–∞–ª–æ–≥—É: {settings['messages_per_dialog']}\n\n"
        "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:**\n"
        f"üì± –ó–±–µ—Ä–µ–∂–µ–Ω—ñ: {stats['SAVED_MESSAGES']}\n"
        f"üí¨ –ü—Ä–∏–≤–∞—Ç–Ω—ñ: {stats['PRIVATE']}\n"
        f"üë• –ì—Ä—É–ø–∏: {stats['GROUP'] + stats['SUPERGROUP']}\n"
        f"üì¢ –ö–∞–Ω–∞–ª–∏: {stats['CHANNEL']}\n"
        f"‚ùì –Ü–Ω—à—ñ: {stats['OTHER']}\n\n"
        "üí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ –¥–ª—è –∑–º—ñ–Ω–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"
    )

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup

    keyboard = [
        [
            InlineKeyboardButton(
                f"üì± –ó–±–µ—Ä–µ–∂–µ–Ω—ñ: {'‚úÖ' if settings['save_saved_messages'] else '‚ùå'}",
                callback_data='toggle_saved'
            ),
            InlineKeyboardButton(
                f"üí¨ –ü—Ä–∏–≤–∞—Ç–Ω—ñ: {'‚úÖ' if settings['save_private_chats'] else '‚ùå'}",
                callback_data='toggle_private'
            )
        ],
        [
            InlineKeyboardButton(
                f"üë• –ì—Ä—É–ø–∏: {'‚úÖ' if settings['save_groups'] else '‚ùå'}",
                callback_data='toggle_groups'
            ),
            InlineKeyboardButton(
                f"üì¢ –ö–∞–Ω–∞–ª–∏: {'‚úÖ' if settings['save_channels'] else '‚ùå'}",
                callback_data='toggle_channels'
            )
        ],
        [
            InlineKeyboardButton("‚öôÔ∏è –¢–µ—Ö–Ω—ñ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data='tech_settings')
        ],
        [
            InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data='refresh_settings')
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text(settings_text, parse_mode='Markdown', reply_markup=reply_markup)

async def test_storage_connection(update: Update, _context: ContextType) -> None:
    user_id = update.effective_user.id
    if not check_access(user_id):
        if update.message:
            await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return

    if update.message:
        await update.message.reply_text("üîÑ –¢–µ—Å—Ç—É—é –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Storage Box...")

    storage_box = StorageBoxManager()
    if storage_box.connect():
        files = storage_box.list_files()
        storage_box.close()

        if update.message:
            await update.message.reply_text(
                f"‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ!\n"
                f"üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: {len(files)}\n"
                f"üåê –°–µ—Ä–≤–µ—Ä: {STORAGE_BOX_HOST}\n"
            f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {STORAGE_BOX_USERNAME}"
        )
    else:
        if update.message:
            await update.message.reply_text(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è!\n"
                f"üåê –°–µ—Ä–≤–µ—Ä: {STORAGE_BOX_HOST}\n"
                f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {STORAGE_BOX_USERNAME}\n"
                f"üìÇ –®–ª—è—Ö: {STORAGE_BOX_PATH}"
            )

async def test_backup(update: Update, _context: ContextType) -> None:
    user_id = update.effective_user.id
    if not check_access(user_id):
        if update.message:
            await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª
    test_data = {
        "test": True,
        "timestamp": datetime.now().isoformat(),
        "messages": [
            {
                "message_id": 999999,
                "text": "–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–µ–∫–∞–ø—É",
                "date": datetime.now().isoformat()
            }
        ]
    }

    test_file = "test_backup.json"
    with open(test_file, 'w', encoding='utf-8') as f:
        json.dump(test_data, f, ensure_ascii=False, indent=4)

    await update.message.reply_text("üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Ç–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª...")

    storage_box = StorageBoxManager()
    if storage_box.connect():
        success = storage_box.upload_file(test_file, f"test_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json")
        storage_box.close()

        if success:
            await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤–∏–π –±–µ–∫–∞–ø —É—Å–ø—ñ—à–Ω–∏–π!")
            os.remove(test_file)  # –í–∏–¥–∞–ª—è—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª
        else:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É")
    else:
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ Storage Box")

async def upload_logs_command(update: Update, _context: ContextType) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ª–æ–≥—ñ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
    user_id = update.effective_user.id
    if not check_access(user_id):
        if update.message:
            await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return

    if update.message:
        await update.message.reply_text("üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –ª–æ–≥–∏ –Ω–∞ Storage Box...")

    await upload_logs_to_storage_box()

    if update.message:
        await update.message.reply_text("‚úÖ –õ–æ–≥–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä!")

async def cleanup_logs_command(update: Update, _context: ContextType) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –ª–æ–≥—ñ–≤"""
    user_id = update.effective_user.id
    if not check_access(user_id):
        if update.message:
            await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return

    if update.message:
        await update.message.reply_text("üóëÔ∏è –û—á–∏—â–∞—é —Å—Ç–∞—Ä—ñ –ª–æ–≥–∏...")

    cleanup_old_logs()

    if update.message:
        await update.message.reply_text("‚úÖ –°—Ç–∞—Ä—ñ –ª–æ–≥–∏ –≤–∏–¥–∞–ª–µ–Ω–æ!")

async def cleanup_old_files_command(update: Update, _context: ContextType) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –ª–æ–∫–∞–ª—å–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏"""
    user_id = update.effective_user.id
    if not check_access(user_id):
        if update.message:
            await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return

    if update.message:
        await update.message.reply_text("üóëÔ∏è –û—á–∏—â–∞—é —Å—Ç–∞—Ä—ñ –ª–æ–∫–∞–ª—å–Ω—ñ —Ñ–∞–π–ª–∏ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏...")

    cleanup_old_local_files()

    if update.message:
        await update.message.reply_text("‚úÖ –°—Ç–∞—Ä—ñ –ª–æ–∫–∞–ª—å–Ω—ñ —Ñ–∞–π–ª–∏ –≤–∏–¥–∞–ª–µ–Ω–æ!")


async def optimization_stats_command(update: Update, _context: ContextType) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó"""
    user_id = update.effective_user.id
    if not check_access(user_id):
        if update.message:
            await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return

    if not OPTIMIZATION_ENABLED:
        if update.message:
            await update.message.reply_text("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –Ω–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞")
        return

    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑ –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö (–ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –¥–æ–¥–∞—Ç–∏)
        message = "üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ê–ú–û–û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–á**\n\n"

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –æ–ø—Ç–∏–º—ñ–∑–∞—Ç–æ—Ä–∞
        if os.path.exists("optimizer_config.json"):
            with open("optimizer_config.json", 'r', encoding='utf-8') as f:
                config = json.load(f)

            message += "‚öôÔ∏è **–ü–æ—Ç–æ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:**\n"
            message += f"  ‚Ä¢ –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {config.get('check_interval', 'N/A')}s\n"
            message += f"  ‚Ä¢ –†–æ–∑–º—ñ—Ä –±–∞—Ç—á—É: {config.get('batch_size', 'N/A')}\n"
            message += f"  ‚Ä¢ –¢–∞–π–º–∞—É—Ç: {config.get('timeout', 'N/A')}s\n"
            message += f"  ‚Ä¢ –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ–π: {config.get('optimization_count', 0)}\n"
            message += f"  ‚Ä¢ –û—Å—Ç–∞–Ω–Ω—è: {config.get('last_optimization', 'N/A')}\n\n"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—Ä–∞—â–µ–Ω—å
        if os.path.exists("code_improvements.json"):
            with open("code_improvements.json", 'r', encoding='utf-8') as f:
                improvements = json.load(f)

            message += f"ü§ñ **AI –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è:**\n"
            message += f"  ‚Ä¢ –ê–Ω–∞–ª—ñ–∑—ñ–≤: {len(improvements)}\n"

            total_improvements = sum(len(r.get('improvements', [])) for r in improvements)
            message += f"  ‚Ä¢ –ü–æ–∫—Ä–∞—â–µ–Ω—å: {total_improvements}\n\n"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π
        if os.path.exists("optimization_suggestions.json"):
            with open("optimization_suggestions.json", 'r', encoding='utf-8') as f:
                suggestions = json.load(f)

            pending = [s for s in suggestions if not s.get('applied', False)]
            applied = [s for s in suggestions if s.get('applied', False)]

            message += f"üí° **–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó:**\n"
            message += f"  ‚Ä¢ –í—Å—å–æ–≥–æ: {len(suggestions)}\n"
            message += f"  ‚Ä¢ –ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ: {len(applied)}\n"
            message += f"  ‚Ä¢ –û—á—ñ–∫—É—é—Ç—å: {len(pending)}\n"

        if update.message and isinstance(update.message, TelegramMessage):
            await update.message.reply_text(message, parse_mode='Markdown')

    except Exception as stats_exc:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats_exc}")
        if update.message and isinstance(update.message, TelegramMessage):
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {stats_exc}")


async def analyze_code_command(update: Update, _context: ContextType) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è AI –∞–Ω–∞–ª—ñ–∑—É –∫–æ–¥—É"""
    user_id = update.effective_user.id
    if not check_access(user_id):
        if update.message:
            await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return

    if not OPTIMIZATION_ENABLED or not AI_ENABLED:
        if update.message:
            await update.message.reply_text("‚ö†Ô∏è AI –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –Ω–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞")
        return

    if update.message:
        await update.message.reply_text("ü§ñ –ó–∞–ø—É—Å–∫–∞—é AI –∞–Ω–∞–ª—ñ–∑ –∫–æ–¥—É...\n–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ —Ö–≤–∏–ª–∏–Ω—É...")

    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ AI –ø–æ–∫—Ä–∞—â—É–≤–∞—á
        ai_improver = AICodeImprover(
            anthropic_client=anthropic_client,
            openai_client=openai_client
        )

        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é message_checker_loop
        code = inspect.getsource(message_checker_loop)

        result = await ai_improver.analyze_and_improve(
            code=code,
            context="–§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ Telegram –±–æ—Ç—ñ"
        )

        if result:
            improvements = result.get('improvements', [])
            message = f"‚úÖ **AI –ê–ù–ê–õ–Ü–ó –ó–ê–í–ï–†–®–ï–ù–û**\n\n"
            message += f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–∫—Ä–∞—â–µ–Ω—å: {len(improvements)}\n\n"

            if improvements:
                message += "üí° **–¢–æ–ø-3 –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó:**\n"
                for i, imp in enumerate(improvements[:3], 1):
                    priority_emoji = {'low': 'üü¢', 'medium': 'üü°', 'high': 'üü†', 'critical': 'üî¥'}
                    emoji = priority_emoji.get(imp.get('priority', 'low'), '‚ö™')
                    message += f"{i}. {emoji} {imp.get('description', 'N/A')}\n"

            message += f"\nüìù –û—Ü—ñ–Ω–∫–∞: {result.get('overall_assessment', 'N/A')}"

            if update.message:
                await update.message.reply_text(message, parse_mode='Markdown')
        else:
            if update.message:
                await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É")

    except Exception as analyze_exc:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ AI –∞–Ω–∞–ª—ñ–∑—É: {analyze_exc}")
        if update.message:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {analyze_exc}")

# –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞)
async def handle_keyboard(update: Update, context: ContextType) -> None:
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏"""
    user_id = update.effective_user.id
    if not check_access(user_id):
        return

    if not update.message:
        return

    text = update.message.text

    # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    if text == "üìä –°—Ç–∞—Ç—É—Å":
        await status(update, context)
    elif text == "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è":
        await settings_command(update, context)
    elif text == "üíæ –ë–µ–∫–∞–ø":
        await backup_now(update, context)
    elif text == "üìÇ –Ü—Å—Ç–æ—Ä—ñ—è":
        await view_history(update, context)
    elif text == "ü§ñ AI –ü–æ–º—ñ—á–Ω–∏–∫":
        await update.message.reply_text(
            "ü§ñ **AI –ü–æ–º—ñ—á–Ω–∏–∫**\n\n"
            "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=get_ai_keyboard(),
            parse_mode='Markdown'
        )
    elif text == "üìù –õ–æ–≥–∏":
        await update.message.reply_text(
            "üìù **–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ª–æ–≥–∞–º–∏**\n\n"
            "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=get_logs_keyboard(),
            parse_mode='Markdown'
        )
    elif text == "üîß –¢–µ—Ö–Ω—ñ—á–Ω–µ":
        await update.message.reply_text(
            "üîß **–¢–µ—Ö–Ω—ñ—á–Ω–µ –º–µ–Ω—é**\n\n"
            "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=get_technical_keyboard(),
            parse_mode='Markdown'
        )
    elif text == "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞":
        await start(update, context)

    # –¢–µ—Ö–Ω—ñ—á–Ω–µ –º–µ–Ω—é
    elif text == "üîå –°—Ç–∞—Ç—É—Å Client API":
        await clientstatus(update, context)
    elif text == "üß™ –¢–µ—Å—Ç":
        await test_client(update, context)
    elif text == "üîç –°–∫–∞–Ω—É–≤–∞—Ç–∏":
        await scan_messages(update, context)
    elif text == "üóÇÔ∏è Debug":
        await debug_settings(update, context)
    elif text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ —Ñ–∞–π–ª–∏":
        await cleanup_old_files_command(update, context)

    # –ú–µ–Ω—é –ª–æ–≥—ñ–≤
    elif text == "üì§ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ª–æ–≥–∏":
        await upload_logs_command(update, context)
    elif text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –ª–æ–≥–∏":
        await cleanup_logs_command(update, context)
    elif text == "üìã –û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–º–∏–ª–∫–∏":
        errors = error_monitor.get_recent_errors(5)
        if errors:
            error_text = "üö® **–û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–º–∏–ª–∫–∏:**\n\n"
            for i, err in enumerate(errors, 1):
                time = datetime.fromisoformat(err['timestamp']).strftime('%H:%M:%S')
                error_text += f"{i}. `{time}` - {err['type']}\n   {err['context']}\n\n"
            await update.message.reply_text(error_text, parse_mode='Markdown')
        else:
            await update.message.reply_text("‚úÖ –ü–æ–º–∏–ª–æ–∫ –Ω–µ–º–∞—î!")

    # AI –º–µ–Ω—é
    elif text == "üîç –ê–Ω–∞–ª—ñ–∑ –ø–æ–º–∏–ª–æ–∫":
        errors = error_monitor.get_recent_errors(1)
        if errors:
            await update.message.reply_text("ü§ñ –ê–Ω–∞–ª—ñ–∑—É—é –æ—Å—Ç–∞–Ω–Ω—é –ø–æ–º–∏–ª–∫—É...")
            error = errors[-1]
            analysis = await ai_assistant.analyze_error(
                error_text=error['traceback'],
                context=error['context']
            )
            if analysis['success']:
                await update.message.reply_text(
                    f"ü§ñ **AI –ê–Ω–∞–ª—ñ–∑:**\n\n{analysis['analysis']}",
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ AI: {analysis.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
        else:
            await update.message.reply_text("‚úÖ –ü–æ–º–∏–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –Ω–µ–º–∞—î!")

    elif text == "üìä –Ü—Å—Ç–æ—Ä—ñ—è –∞–Ω–∞–ª—ñ–∑—ñ–≤":
        if ai_assistant.error_history:
            history_text = "üìä **–Ü—Å—Ç–æ—Ä—ñ—è AI –∞–Ω–∞–ª—ñ–∑—ñ–≤:**\n\n"
            for i, item in enumerate(ai_assistant.error_history[-5:], 1):
                time = datetime.fromisoformat(item['timestamp']).strftime('%H:%M:%S')
                history_text += f"{i}. `{time}`\n{item['error'][:100]}...\n\n"
            await update.message.reply_text(history_text, parse_mode='Markdown')
        else:
            await update.message.reply_text("üì≠ –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è")

    elif text == "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è AI":
        ai_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π" if (openai_client or anthropic_client) else "‚ùå –ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"
        provider_name = "OpenAI GPT-4" if AI_PROVIDER == "openai" else "Anthropic Claude"

        await update.message.reply_text(
            f"‚öôÔ∏è **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è AI:**\n\n"
            f"–°—Ç–∞—Ç—É—Å: {ai_status}\n"
            f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_name}\n"
            f"–Ü—Å—Ç–æ—Ä—ñ—è: {len(ai_assistant.error_history)} –∞–Ω–∞–ª—ñ–∑—ñ–≤\n\n"
            f"–î–ª—è –∑–º—ñ–Ω–∏ API –∫–ª—é—á—ñ–≤ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ –∫–æ–¥.",
            parse_mode='Markdown'
        )

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    elif text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
            reply_markup=get_main_keyboard()
        )

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –¥–æ –±–æ—Ç–∞
bot_app.add_handler(CommandHandler("start", start, ))
bot_app.add_handler(CommandHandler("status", status, ))
bot_app.add_handler(CommandHandler("settings", settings_command, ))
bot_app.add_handler(CommandHandler("backup", backup_now, ))
bot_app.add_handler(CommandHandler("history", view_history, ))
bot_app.add_handler(CommandHandler("clientstatus", clientstatus, ))
bot_app.add_handler(CommandHandler("myuuid", myuuid, ))
bot_app.add_handler(CommandHandler("debug", debug_settings, ))
bot_app.add_handler(CommandHandler("test", test_client, ))
bot_app.add_handler(CommandHandler("scan", scan_messages, ))
bot_app.add_handler(CommandHandler("autoscan", auto_scan_status, ))
bot_app.add_handler(CommandHandler("teststorage", test_storage_connection, ))
bot_app.add_handler(CommandHandler("testbackup", test_backup, ))
bot_app.add_handler(CommandHandler("uploadlogs", upload_logs_command, ))
bot_app.add_handler(CommandHandler("cleanlogs", cleanup_logs_command, ))
bot_app.add_handler(CommandHandler("cleanfiles", cleanup_old_files_command, ))
bot_app.add_handler(CommandHandler("optstats", optimization_stats_command, ))
bot_app.add_handler(CommandHandler("analyzecode", analyze_code_command, ))
bot_app.add_handler(MessageHandler(tg_filters.TEXT & ~tg_filters.COMMAND, handle_keyboard, ))
bot_app.add_handler(CallbackQueryHandler(handle_callback_query, ))

async def main():
    global main_loop
    main_loop = asyncio.get_running_loop()

    # –°—Ç–≤–æ—Ä—é—î–º–æ Event –¥–ª—è –∑—É–ø–∏–Ω–∫–∏
    stop_event = asyncio.Event()

    # –û–±—Ä–æ–±–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    def signal_handler():
        logger.info("‚èπÔ∏è –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏")
        stop_event.set()

    # –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤
    try:
        loop = asyncio.get_running_loop()
        for sig in (signal.SIGTERM, signal.SIGINT):
            loop.add_signal_handler(sig, signal_handler)  # type: ignore[arg-type]
    except NotImplementedError:
        # Windows –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î add_signal_handler
        pass

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ —Å–∞–º–æ–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
    optimizer = None
    performance_monitor = None
    ai_improver = None
    cache_manager = None
    optimization_enabled = OPTIMIZATION_ENABLED  # –õ–æ–∫–∞–ª—å–Ω–∞ –∫–æ–ø—ñ—è

    if optimization_enabled:
        try:
            logger.info("ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ —Å–∞–º–æ–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó...")

            # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–ø—Ç–∏–º—ñ–∑–∞—Ç–æ—Ä –∑ AI –∫–ª—ñ—î–Ω—Ç–∞–º–∏
            optimizer = SelfOptimizer(
                openai_client=openai_client if AI_ENABLED else None,
                anthropic_client=anthropic_client if AI_ENABLED else None
            )

            # –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            performance_monitor = PerformanceMonitor(optimizer)

            # –°—Ç–≤–æ—Ä—é—î–º–æ AI –ø–æ–∫—Ä–∞—â—É–≤–∞—á –∫–æ–¥—É
            ai_improver = AICodeImprover(
                anthropic_client=anthropic_client if AI_ENABLED else None,
                openai_client=openai_client if AI_ENABLED else None
            )

            # –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä –∫–µ—à—É
            cache_manager = CacheManager(default_ttl=300)

            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞!")
            logger.info("   üìä –ü—Ä–æ—Ñ—ñ–ª—é–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: ‚úÖ")
            logger.info("   ‚öôÔ∏è –ê–¥–∞–ø—Ç–∏–≤–Ω–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤: ‚úÖ")
            logger.info("   ü§ñ AI –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∫–æ–¥—É: ‚úÖ")
            logger.info("   üíæ –ö–µ—à—É–≤–∞–Ω–Ω—è: ‚úÖ")

        except Exception as e:
            logger.error(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó: {e}")
            optimization_enabled = False

    # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ –ª–æ–∫–∞–ª—å–Ω—ñ —Ñ–∞–π–ª–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
    logger.info("üßπ –ü–µ—Ä–µ–≤—ñ—Ä—è—é –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Å—Ç–∞—Ä–∏—Ö –ª–æ–∫–∞–ª—å–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤...")
    cleanup_old_local_files()

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
    scheduler = setup_scheduler()

    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –≥—ñ–±—Ä–∏–¥–Ω—É —Å–∏—Å—Ç–µ–º—É...")

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Client API
    logger.info("üì± –ó–∞–ø—É—Å–∫–∞—é Telegram Client API...")
    await client_app.start()
    me = await client_app.get_me()
    logger.info(f"‚úÖ Client API –∑–∞–ø—É—â–µ–Ω–∏–π –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {me.first_name} (@{me.username})")

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Bot API
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫–∞—é Telegram Bot API...")
    await bot_app.initialize()
    await bot_app.start()
    await bot_app.updater.start_polling()

    logger.info("üéâ –ì—ñ–±—Ä–∏–¥–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
    logger.info("üì± Client API –∑–±–µ—Ä—ñ–≥–∞—î –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")

    # –í–∏–≤–æ–¥–∏–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –∫–æ–Ω—Å–æ–ª—å
    print("\n" + "="*60)
    print("ü§ñ –ë–û–¢ –ó–ê–ü–£–©–ï–ù–û")
    print("="*60)
    print(f"üì± –ó–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {'‚úÖ' if settings['save_saved_messages'] else '‚ùå'}")
    print(f"üí¨ –ü—Ä–∏–≤–∞—Ç–Ω—ñ —á–∞—Ç–∏: {'‚úÖ' if settings['save_private_chats'] else '‚ùå'}")
    print(f"üë• –ì—Ä—É–ø–∏: {'‚úÖ' if settings['save_groups'] else '‚ùå'}")
    print(f"üì¢ –ö–∞–Ω–∞–ª–∏: {'‚úÖ' if settings['save_channels'] else '‚ùå'}")
    print(f"‚è±Ô∏è  –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {settings['check_interval']} —Å–µ–∫")
    print("="*60)
    print("üíæ –ó–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n")

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —à–≤–∏–¥–∫–∏–π —Ü–∏–∫–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    message_checker_task = asyncio.create_task(message_checker_loop())

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ü–∏–∫–ª —Å–∞–º–æ–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó —è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ
    optimization_task = None
    if optimization_enabled and optimizer:
        async def optimization_loop():
            """–¶–∏–∫–ª —Å–∞–º–æ–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó"""
            while True:
                try:
                    await asyncio.sleep(300)  # –ö–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω

                    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ü–∏–∫–ª –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
                    await optimizer.run_optimization_cycle()

                    # –í–∏–≤–æ–¥–∏–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    if performance_monitor:
                        performance_monitor.log_stats()

                    if cache_manager:
                        cache_manager.clear_expired()
                        cache_manager.log_stats()

                    if ai_improver:
                        ai_improver.log_stats()

                except asyncio.CancelledError:
                    break
                except Exception as opt_error:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó: {opt_error}")

        optimization_task = asyncio.create_task(optimization_loop())
        logger.info("üîÑ –¶–∏–∫–ª —Å–∞–º–æ–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –∑–∞–ø—É—â–µ–Ω–æ")

    try:
        # –¢—Ä–∏–º–∞—î–º–æ —Å–∏—Å—Ç–µ–º—É –∑–∞–ø—É—â–µ–Ω–æ—é
        await stop_event.wait()
    except (KeyboardInterrupt, asyncio.CancelledError):
        print("\n‚èπÔ∏è  –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏...")
        logger.info("‚èπÔ∏è –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏ —á–µ—Ä–µ–∑ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è")
    finally:
        print("üîÑ –ó—É–ø–∏–Ω—è—é —Å–∏—Å—Ç–µ–º—É...")
        logger.info("üîÑ –ó—É–ø–∏–Ω—è—é —Å–∏—Å—Ç–µ–º—É...")

        # –°–∫–∞—Å–æ–≤—É—î–º–æ –∑–∞–¥–∞—á—É –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
        if optimization_task and not optimization_task.done():
            optimization_task.cancel()
            try:
                await optimization_task
            except asyncio.CancelledError:
                pass

        # –°–∫–∞—Å–æ–≤—É—î–º–æ –∑–∞–¥–∞—á—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        if not message_checker_task.done():
            message_checker_task.cancel()
            try:
                await message_checker_task
            except asyncio.CancelledError:
                pass

        # –ó—É–ø–∏–Ω—è—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
        scheduler.shutdown(wait=False)

        # –ó—É–ø–∏–Ω—è—î–º–æ Bot API
        try:
            await asyncio.wait_for(bot_app.updater.stop(), timeout=2.0)
            await asyncio.wait_for(bot_app.stop(), timeout=2.0)
            await asyncio.wait_for(bot_app.shutdown(), timeout=2.0)
            print("‚úÖ Bot API –∑—É–ø–∏–Ω–µ–Ω–æ")
            logger.info("‚úÖ Bot API –∑—É–ø–∏–Ω–µ–Ω–æ")
        except asyncio.TimeoutError:
            print("‚úÖ Bot API –∑—É–ø–∏–Ω–µ–Ω–æ (–∑ timeout)")
            logger.info("‚úÖ Bot API –∑—É–ø–∏–Ω–µ–Ω–æ (–∑ timeout)")
        except Exception as e:
            logger.debug(f"–î–µ—Ç–∞–ª—ñ –∑—É–ø–∏–Ω–∫–∏ Bot API: {e}")

        # –ó—É–ø–∏–Ω—è—î–º–æ Client API —Ç–∞ –æ—á–∏—â–∞—î–º–æ –π–æ–≥–æ tasks
        try:
            # –°–ø–æ—á–∞—Ç–∫—É –∑—É–ø–∏–Ω—è—î–º–æ Client API
            try:
                await asyncio.wait_for(client_app.stop(), timeout=3.0)
                print("‚úÖ Client API –∑—É–ø–∏–Ω–µ–Ω–æ")
                logger.info("‚úÖ Client API –∑—É–ø–∏–Ω–µ–Ω–æ")
            except (asyncio.TimeoutError, RuntimeError):
                print("‚úÖ Client API –∑—É–ø–∏–Ω–µ–Ω–æ (–∑ timeout)")
                logger.info("‚úÖ Client API –∑—É–ø–∏–Ω–µ–Ω–æ (–∑ timeout)")

            # –¢–µ–ø–µ—Ä –æ—á–∏—â–∞—î–º–æ –≤—Å—ñ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω—ñ tasks Pyrogram
            await asyncio.sleep(0.1)  # –î–∞—î–º–æ —á–∞—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
            current_task = asyncio.current_task()
            pending = [
                task for task in asyncio.all_tasks()
                if task != current_task and not task.done()
            ]

            if pending:
                logger.debug(f"üßπ –û—á–∏—â–∞—é {len(pending)} –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö Pyrogram tasks...")
                for task in pending:
                    task.cancel()
                # –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑ timeout
                await asyncio.wait(pending, timeout=1.0)
                logger.debug("‚úÖ Pyrogram tasks –æ—á–∏—â–µ–Ω–æ")

        except asyncio.CancelledError:
            print("‚úÖ Client API –∑—É–ø–∏–Ω–µ–Ω–æ (cancelled)")
            logger.info("‚úÖ Client API –∑—É–ø–∏–Ω–µ–Ω–æ (cancelled)")
        except Exception as e:
            logger.debug(f"–î–µ—Ç–∞–ª—ñ –∑—É–ø–∏–Ω–∫–∏ Client API: {e}")

        print("\n" + "="*60)
        print("‚úÖ –°–ò–°–¢–ï–ú–ê –ó–£–ü–ò–ù–ï–ù–ê")
        print("="*60 + "\n")
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑—É–ø–∏–Ω–µ–Ω–∞")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–æ–≥—Ä–∞–º–∞ –∑—É–ø–∏–Ω–µ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")

    # –ü–†–ò–ú–Ü–¢–ö–ê: –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ –º–æ–∂—É—Ç—å –∑'—è–≤–ª—è—Ç–∏—Å—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:
    # "ERROR: Task was destroyed but it is pending! task: <Task ... Dispatcher.handler_worker()>"
    # –¶–µ –≤—ñ–¥–æ–º–∞ –ø—Ä–æ–±–ª–µ–º–∞ Pyrogram - Dispatcher –Ω–µ –æ—á–∏—â–∞—î —Å–≤–æ—ó –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ tasks.
    # –¶—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ú–û–ñ–ù–ê –Ü–ì–ù–û–†–£–í–ê–¢–ò - –≤–æ–Ω–∏ –Ω–µ –≤–ø–ª–∏–≤–∞—é—Ç—å –Ω–∞ —Ä–æ–±–æ—Ç—É –±–æ—Ç–∞,
    # –≤—Å—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ, –Ω–µ–º–∞—î –≤–∏—Ç–æ–∫—É –ø–∞–º'—è—Ç—ñ. Exit code 0 = —É—Å–ø—ñ—à–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.



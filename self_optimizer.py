"""
ü§ñ –ú–û–î–£–õ–¨ –°–ê–ú–û–û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–á –ë–û–¢–ê
–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∞–Ω–∞–ª—ñ–∑—É—î, –æ–ø—Ç–∏–º—ñ–∑—É—î —Ç–∞ –ø–æ–∫—Ä–∞—â—É—î —Ä–æ–±–æ—Ç—É –±–æ—Ç–∞
"""

import asyncio
import time
import json
import os
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from dataclasses import dataclass, asdict
import statistics
from collections import deque

logger = logging.getLogger(__name__)


@dataclass
class PerformanceMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
    timestamp: float
    function_name: str
    execution_time: float
    memory_usage: Optional[float] = None
    cpu_usage: Optional[float] = None
    success: bool = True
    error: Optional[str] = None


@dataclass
class OptimizationSuggestion:
    """–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó"""
    timestamp: float
    category: str  # 'performance', 'parameters', 'code'
    priority: str  # 'low', 'medium', 'high', 'critical'
    description: str
    current_value: Any
    suggested_value: Any
    expected_improvement: str
    auto_apply: bool = False
    applied: bool = False


class PerformanceProfiler:
    """–ü—Ä–æ—Ñ—ñ–ª—é–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
    
    def __init__(self, max_history: int = 1000):
        self.metrics: deque = deque(maxlen=max_history)
        self.function_stats: Dict[str, List[float]] = {}
        
    def record_metric(self, metric: PerformanceMetrics):
        """–ó–∞–ø–∏—Å–∞—Ç–∏ –º–µ—Ç—Ä–∏–∫—É"""
        self.metrics.append(metric)
        
        if metric.function_name not in self.function_stats:
            self.function_stats[metric.function_name] = []
        
        self.function_stats[metric.function_name].append(metric.execution_time)
        
    def get_function_stats(self, function_name: str) -> Dict[str, float]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó"""
        if function_name not in self.function_stats:
            return {}
        
        times = self.function_stats[function_name]
        if not times:
            return {}
        
        return {
            'count': len(times),
            'total': sum(times),
            'mean': statistics.mean(times),
            'median': statistics.median(times),
            'min': min(times),
            'max': max(times),
            'stdev': statistics.stdev(times) if len(times) > 1 else 0
        }
    
    def get_slow_functions(self, threshold: float = 1.0) -> List[tuple]:
        """–ó–Ω–∞–π—Ç–∏ –ø–æ–≤—ñ–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó"""
        slow_functions = []
        
        for func_name, times in self.function_stats.items():
            if not times:
                continue
            
            avg_time = statistics.mean(times)
            if avg_time > threshold:
                slow_functions.append((func_name, avg_time, len(times)))
        
        return sorted(slow_functions, key=lambda x: x[1], reverse=True)
    
    def analyze_trends(self, function_name: str, window: int = 100) -> Dict[str, Any]:
        """–ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—ñ–≤ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
        if function_name not in self.function_stats:
            return {}
        
        times = list(self.function_stats[function_name])
        if len(times) < window:
            return {'trend': 'insufficient_data'}
        
        recent = times[-window:]
        older = times[-window*2:-window] if len(times) >= window*2 else times[:-window]
        
        if not older:
            return {'trend': 'insufficient_data'}
        
        recent_avg = statistics.mean(recent)
        older_avg = statistics.mean(older)
        
        change_percent = ((recent_avg - older_avg) / older_avg) * 100
        
        if change_percent > 10:
            trend = 'degrading'
        elif change_percent < -10:
            trend = 'improving'
        else:
            trend = 'stable'
        
        return {
            'trend': trend,
            'recent_avg': recent_avg,
            'older_avg': older_avg,
            'change_percent': change_percent
        }


class AdaptiveParameterOptimizer:
    """–ê–¥–∞–ø—Ç–∏–≤–Ω–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤"""
    
    def __init__(self, config_file: str = "optimizer_config.json"):
        self.config_file = config_file
        self.parameters = self.load_config()
        self.performance_history = deque(maxlen=1000)
        
    def load_config(self) -> Dict[str, Any]:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é"""
        if os.path.exists(self.config_file):
            try:
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
        
        # –î–µ—Ñ–æ–ª—Ç–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        return {
            'check_interval': 0.5,
            'batch_size': 10,
            'timeout': 30,
            'max_retries': 3,
            'cache_ttl': 300,
            'optimization_enabled': True,
            'last_optimization': None,
            'optimization_count': 0
        }
    
    def save_config(self):
        """–ó–±–µ—Ä–µ–≥—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é"""
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(self.parameters, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
    
    def record_performance(self, messages_count: int, processing_time: float):
        """–ó–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
        self.performance_history.append({
            'timestamp': time.time(),
            'messages_count': messages_count,
            'processing_time': processing_time,
            'check_interval': self.parameters['check_interval']
        })
    
    def optimize_check_interval(self) -> Optional[float]:
        """–û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"""
        if len(self.performance_history) < 10:
            return None
        
        recent = list(self.performance_history)[-10:]
        avg_messages = statistics.mean([r['messages_count'] for r in recent])
        avg_time = statistics.mean([r['processing_time'] for r in recent])
        
        current_interval = self.parameters['check_interval']
        
        # –Ø–∫—â–æ –±–∞–≥–∞—Ç–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å - –∑–º–µ–Ω—à—É—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª
        if avg_messages > 5 and current_interval > 0.1:
            new_interval = max(0.1, current_interval * 0.8)
            return new_interval
        
        # –Ø–∫—â–æ –º–∞–ª–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å - –∑–±—ñ–ª—å—à—É—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª
        if avg_messages < 1 and current_interval < 2.0:
            new_interval = min(2.0, current_interval * 1.2)
            return new_interval
        
        # –Ø–∫—â–æ –æ–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–ª—å–Ω–∞ - –∑–±—ñ–ª—å—à—É—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª
        if avg_time > 1.0 and current_interval < 1.0:
            new_interval = min(1.0, current_interval * 1.1)
            return new_interval
        
        return None
    
    def apply_optimization(self, parameter: str, new_value: Any) -> bool:
        """–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é"""
        old_value = self.parameters.get(parameter)
        self.parameters[parameter] = new_value
        self.parameters['last_optimization'] = datetime.now().isoformat()
        self.parameters['optimization_count'] = self.parameters.get('optimization_count', 0) + 1
        self.save_config()
        
        logger.info(f"üîß –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è: {parameter} –∑–º—ñ–Ω–µ–Ω–æ –∑ {old_value} –Ω–∞ {new_value}")
        return True
    
    def get_current_parameters(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏"""
        return self.parameters.copy()


class AICodeOptimizer:
    """AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –∫–æ–¥—É"""
    
    def __init__(self, openai_client=None, anthropic_client=None):
        self.openai_client = openai_client
        self.anthropic_client = anthropic_client
        self.suggestions_file = "optimization_suggestions.json"
        self.suggestions: List[OptimizationSuggestion] = []
        self.load_suggestions()
        
    def load_suggestions(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó"""
        if os.path.exists(self.suggestions_file):
            try:
                with open(self.suggestions_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.suggestions = [OptimizationSuggestion(**s) for s in data]
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π: {e}")
    
    def save_suggestions(self):
        """–ó–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó"""
        try:
            with open(self.suggestions_file, 'w', encoding='utf-8') as f:
                data = [asdict(s) for s in self.suggestions]
                json.dump(data, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π: {e}")
    
    async def analyze_code_with_ai(self, code_snippet: str, context: str) -> Optional[str]:
        """–ê–Ω–∞–ª—ñ–∑ –∫–æ–¥—É —á–µ—Ä–µ–∑ AI"""
        if not self.anthropic_client:
            return None
        
        try:
            prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ü–µ–π Python –∫–æ–¥ —ñ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó:

–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}

–ö–æ–¥:
```python
{code_snippet}
```

–ó–∞–ø—Ä–æ–ø–æ–Ω—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –¥–ª—è:
1. –®–≤–∏–¥–∫–æ—Å—Ç—ñ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
2. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ
3. –ß–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ –∫–æ–¥—É
4. –û–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫

–í—ñ–¥–ø–æ–≤—ñ–¥—å —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON:
{{
  "optimizations": [
    {{
      "type": "performance|memory|readability|error_handling",
      "description": "–æ–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏",
      "suggestion": "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è",
      "code": "–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –∫–æ–¥"
    }}
  ]
}}"""
            
            response = await self.anthropic_client.messages.create(
                model="claude-3-5-sonnet-20241022",
                max_tokens=2000,
                messages=[{"role": "user", "content": prompt}]
            )
            
            return response.content[0].text
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ AI –∞–Ω–∞–ª—ñ–∑—É: {e}")
            return None
    
    def add_suggestion(self, suggestion: OptimizationSuggestion):
        """–î–æ–¥–∞—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é"""
        self.suggestions.append(suggestion)
        self.save_suggestions()
        
        priority_emoji = {'low': 'üü¢', 'medium': 'üü°', 'high': 'üü†', 'critical': 'üî¥'}
        emoji = priority_emoji.get(suggestion.priority, '‚ö™')
        
        logger.info(f"{emoji} –ù–æ–≤–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó: {suggestion.description}")
    
    def get_pending_suggestions(self) -> List[OptimizationSuggestion]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–µ–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó"""
        return [s for s in self.suggestions if not s.applied]


class SelfOptimizer:
    """–ì–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å —Å–∞–º–æ–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó"""
    
    def __init__(self, openai_client=None, anthropic_client=None):
        self.profiler = PerformanceProfiler()
        self.parameter_optimizer = AdaptiveParameterOptimizer()
        self.ai_optimizer = AICodeOptimizer(openai_client, anthropic_client)
        self.optimization_interval = 300  # 5 —Ö–≤–∏–ª–∏–Ω
        self.last_optimization = time.time()
        self.enabled = True
        
    async def run_optimization_cycle(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ü–∏–∫–ª –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó"""
        if not self.enabled:
            return
        
        current_time = time.time()
        if current_time - self.last_optimization < self.optimization_interval:
            return
        
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª—É —Å–∞–º–æ–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó...")
        
        # 1. –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        slow_functions = self.profiler.get_slow_functions(threshold=0.5)
        if slow_functions:
            logger.warning(f"‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ {len(slow_functions)} –ø–æ–≤—ñ–ª—å–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π:")
            for func_name, avg_time, count in slow_functions[:5]:
                logger.warning(f"  - {func_name}: {avg_time:.3f}s (–≤–∏–∫–ª–∏–∫—ñ–≤: {count})")
        
        # 2. –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        new_interval = self.parameter_optimizer.optimize_check_interval()
        if new_interval:
            self.parameter_optimizer.apply_optimization('check_interval', new_interval)
        
        # 3. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π
        await self.generate_suggestions()
        
        self.last_optimization = current_time
        logger.info("‚úÖ –¶–∏–∫–ª –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    async def generate_suggestions(self):
        """–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó"""
        # –ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—ñ–≤
        for func_name in self.profiler.function_stats.keys():
            trend = self.profiler.analyze_trends(func_name)
            
            if trend.get('trend') == 'degrading':
                suggestion = OptimizationSuggestion(
                    timestamp=time.time(),
                    category='performance',
                    priority='medium',
                    description=f"–§—É–Ω–∫—Ü—ñ—è {func_name} —Å–ø–æ–≤—ñ–ª—å–Ω–∏–ª–∞—Å—è –Ω–∞ {trend['change_percent']:.1f}%",
                    current_value=trend['recent_avg'],
                    suggested_value=trend['older_avg'],
                    expected_improvement=f"–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó —à–≤–∏–¥–∫–æ—Å—Ç—ñ",
                    auto_apply=False
                )
                self.ai_optimizer.add_suggestion(suggestion)

